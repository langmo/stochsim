cmdl_Input 'IDENTIFIER'
cmdl_Reduce [statements ::=], go to state 0.
cmdl_Shift 'statements', go to state 1
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements IDENTIFIER]
cmdl_Input 'ASSIGN'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 1.
cmdl_Shift 'variable', go to state 88
cmdl_Shift 'ASSIGN', go to state 17
cmdl_Return. Stack=[statements variable ASSIGN]
cmdl_Input 'VALUE'
cmdl_Shift 'VALUE'
cmdl_Return. Stack=[statements variable ASSIGN VALUE]
cmdl_Input 'SEMICOLON'
cmdl_Reduce [expression ::= VALUE], go to state 17.
cmdl_Shift 'expression', go to state 60
cmdl_Shift 'SEMICOLON'
cmdl_Return. Stack=[statements variable ASSIGN expression SEMICOLON]
cmdl_Input 'IDENTIFIER'
cmdl_Reduce [assignment ::= variable ASSIGN expression SEMICOLON], go to state 1.
cmdl_Shift 'assignment'
cmdl_Reduce [statements ::= statements statement], go to state 0.
cmdl_Shift 'statements', go to state 1
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements IDENTIFIER]
cmdl_Input 'ASSIGN'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 1.
cmdl_Shift 'variable', go to state 88
cmdl_Shift 'ASSIGN', go to state 17
cmdl_Return. Stack=[statements variable ASSIGN]
cmdl_Input 'VALUE'
cmdl_Shift 'VALUE'
cmdl_Return. Stack=[statements variable ASSIGN VALUE]
cmdl_Input 'SEMICOLON'
cmdl_Reduce [expression ::= VALUE], go to state 17.
cmdl_Shift 'expression', go to state 60
cmdl_Shift 'SEMICOLON'
cmdl_Return. Stack=[statements variable ASSIGN expression SEMICOLON]
cmdl_Input 'IDENTIFIER'
cmdl_Reduce [assignment ::= variable ASSIGN expression SEMICOLON], go to state 1.
cmdl_Shift 'assignment'
cmdl_Reduce [statements ::= statements statement], go to state 0.
cmdl_Shift 'statements', go to state 1
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements IDENTIFIER]
cmdl_Input 'ASSIGN'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 1.
cmdl_Shift 'variable', go to state 88
cmdl_Shift 'ASSIGN', go to state 17
cmdl_Return. Stack=[statements variable ASSIGN]
cmdl_Input 'VALUE'
cmdl_Shift 'VALUE'
cmdl_Return. Stack=[statements variable ASSIGN VALUE]
cmdl_Input 'MULTIPLY'
cmdl_Reduce [expression ::= VALUE], go to state 17.
cmdl_Shift 'expression', go to state 60
cmdl_Shift 'MULTIPLY', go to state 44
cmdl_Return. Stack=[statements variable ASSIGN expression MULTIPLY]
cmdl_Input 'VALUE'
cmdl_Shift 'VALUE'
cmdl_Return. Stack=[statements variable ASSIGN expression MULTIPLY VALUE]
cmdl_Input 'EXP'
cmdl_Reduce [expression ::= VALUE], go to state 44.
cmdl_Shift 'expression', go to state 123
cmdl_Shift 'EXP', go to state 40
cmdl_Return. Stack=[statements variable ASSIGN expression MULTIPLY expression EXP]
cmdl_Input 'MINUS'
cmdl_Shift 'MINUS', go to state 28
cmdl_Return. Stack=[statements variable ASSIGN expression MULTIPLY expression EXP MINUS]
cmdl_Input 'VALUE'
cmdl_Shift 'VALUE'
cmdl_Return. Stack=[statements variable ASSIGN expression MULTIPLY expression EXP MINUS VALUE]
cmdl_Input 'DIVIDE'
cmdl_Reduce [expression ::= VALUE], go to state 28.
cmdl_Shift 'expression', go to state 118
cmdl_Reduce [expression ::= MINUS expression], go to state 40.
cmdl_Shift 'expression', go to state 121
cmdl_Reduce [expression ::= expression EXP expression], go to state 44.
cmdl_Shift 'expression', go to state 123
cmdl_Reduce [product ::= expression MULTIPLY expression], go to state 17.
cmdl_Shift 'product'
cmdl_Reduce [expression ::= product], go to state 17.
cmdl_Shift 'expression', go to state 60
cmdl_Shift 'DIVIDE', go to state 43
cmdl_Return. Stack=[statements variable ASSIGN expression DIVIDE]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements variable ASSIGN expression DIVIDE IDENTIFIER]
cmdl_Input 'SEMICOLON'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 43.
cmdl_Shift 'variable', go to state 124
cmdl_Reduce [expression ::= variable], go to state 43.
cmdl_Shift 'expression', go to state 122
cmdl_Reduce [product ::= expression DIVIDE expression], go to state 17.
cmdl_Shift 'product'
cmdl_Reduce [expression ::= product], go to state 17.
cmdl_Shift 'expression', go to state 60
cmdl_Shift 'SEMICOLON'
cmdl_Return. Stack=[statements variable ASSIGN expression SEMICOLON]
cmdl_Input 'IDENTIFIER'
cmdl_Reduce [assignment ::= variable ASSIGN expression SEMICOLON], go to state 1.
cmdl_Shift 'assignment'
cmdl_Reduce [statements ::= statements statement], go to state 0.
cmdl_Shift 'statements', go to state 1
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements IDENTIFIER]
cmdl_Input 'ASSIGN'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 1.
cmdl_Shift 'variable', go to state 88
cmdl_Shift 'ASSIGN', go to state 17
cmdl_Return. Stack=[statements variable ASSIGN]
cmdl_Input 'VALUE'
cmdl_Shift 'VALUE'
cmdl_Return. Stack=[statements variable ASSIGN VALUE]
cmdl_Input 'SEMICOLON'
cmdl_Reduce [expression ::= VALUE], go to state 17.
cmdl_Shift 'expression', go to state 60
cmdl_Shift 'SEMICOLON'
cmdl_Return. Stack=[statements variable ASSIGN expression SEMICOLON]
cmdl_Input 'IDENTIFIER'
cmdl_Reduce [assignment ::= variable ASSIGN expression SEMICOLON], go to state 1.
cmdl_Shift 'assignment'
cmdl_Reduce [statements ::= statements statement], go to state 0.
cmdl_Shift 'statements', go to state 1
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements IDENTIFIER]
cmdl_Input 'ASSIGN'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 1.
cmdl_Shift 'variable', go to state 88
cmdl_Shift 'ASSIGN', go to state 17
cmdl_Return. Stack=[statements variable ASSIGN]
cmdl_Input 'VALUE'
cmdl_Shift 'VALUE'
cmdl_Return. Stack=[statements variable ASSIGN VALUE]
cmdl_Input 'DIVIDE'
cmdl_Reduce [expression ::= VALUE], go to state 17.
cmdl_Shift 'expression', go to state 60
cmdl_Shift 'DIVIDE', go to state 43
cmdl_Return. Stack=[statements variable ASSIGN expression DIVIDE]
cmdl_Input 'VALUE'
cmdl_Shift 'VALUE'
cmdl_Return. Stack=[statements variable ASSIGN expression DIVIDE VALUE]
cmdl_Input 'SEMICOLON'
cmdl_Reduce [expression ::= VALUE], go to state 43.
cmdl_Shift 'expression', go to state 122
cmdl_Reduce [product ::= expression DIVIDE expression], go to state 17.
cmdl_Shift 'product'
cmdl_Reduce [expression ::= product], go to state 17.
cmdl_Shift 'expression', go to state 60
cmdl_Shift 'SEMICOLON'
cmdl_Return. Stack=[statements variable ASSIGN expression SEMICOLON]
cmdl_Input 'IDENTIFIER'
cmdl_Reduce [assignment ::= variable ASSIGN expression SEMICOLON], go to state 1.
cmdl_Shift 'assignment'
cmdl_Reduce [statements ::= statements statement], go to state 0.
cmdl_Shift 'statements', go to state 1
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements IDENTIFIER]
cmdl_Input 'ASSIGN'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 1.
cmdl_Shift 'variable', go to state 88
cmdl_Shift 'ASSIGN', go to state 17
cmdl_Return. Stack=[statements variable ASSIGN]
cmdl_Input 'VALUE'
cmdl_Shift 'VALUE'
cmdl_Return. Stack=[statements variable ASSIGN VALUE]
cmdl_Input 'SEMICOLON'
cmdl_Reduce [expression ::= VALUE], go to state 17.
cmdl_Shift 'expression', go to state 60
cmdl_Shift 'SEMICOLON'
cmdl_Return. Stack=[statements variable ASSIGN expression SEMICOLON]
cmdl_Input 'IDENTIFIER'
cmdl_Reduce [assignment ::= variable ASSIGN expression SEMICOLON], go to state 1.
cmdl_Shift 'assignment'
cmdl_Reduce [statements ::= statements statement], go to state 0.
cmdl_Shift 'statements', go to state 1
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements IDENTIFIER]
cmdl_Input 'ASSIGN'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 1.
cmdl_Shift 'variable', go to state 88
cmdl_Shift 'ASSIGN', go to state 17
cmdl_Return. Stack=[statements variable ASSIGN]
cmdl_Input 'VALUE'
cmdl_Shift 'VALUE'
cmdl_Return. Stack=[statements variable ASSIGN VALUE]
cmdl_Input 'MULTIPLY'
cmdl_Reduce [expression ::= VALUE], go to state 17.
cmdl_Shift 'expression', go to state 60
cmdl_Shift 'MULTIPLY', go to state 44
cmdl_Return. Stack=[statements variable ASSIGN expression MULTIPLY]
cmdl_Input 'VALUE'
cmdl_Shift 'VALUE'
cmdl_Return. Stack=[statements variable ASSIGN expression MULTIPLY VALUE]
cmdl_Input 'EXP'
cmdl_Reduce [expression ::= VALUE], go to state 44.
cmdl_Shift 'expression', go to state 123
cmdl_Shift 'EXP', go to state 40
cmdl_Return. Stack=[statements variable ASSIGN expression MULTIPLY expression EXP]
cmdl_Input 'MINUS'
cmdl_Shift 'MINUS', go to state 28
cmdl_Return. Stack=[statements variable ASSIGN expression MULTIPLY expression EXP MINUS]
cmdl_Input 'VALUE'
cmdl_Shift 'VALUE'
cmdl_Return. Stack=[statements variable ASSIGN expression MULTIPLY expression EXP MINUS VALUE]
cmdl_Input 'SEMICOLON'
cmdl_Reduce [expression ::= VALUE], go to state 28.
cmdl_Shift 'expression', go to state 118
cmdl_Reduce [expression ::= MINUS expression], go to state 40.
cmdl_Shift 'expression', go to state 121
cmdl_Reduce [expression ::= expression EXP expression], go to state 44.
cmdl_Shift 'expression', go to state 123
cmdl_Reduce [product ::= expression MULTIPLY expression], go to state 17.
cmdl_Shift 'product'
cmdl_Reduce [expression ::= product], go to state 17.
cmdl_Shift 'expression', go to state 60
cmdl_Shift 'SEMICOLON'
cmdl_Return. Stack=[statements variable ASSIGN expression SEMICOLON]
cmdl_Input 'IDENTIFIER'
cmdl_Reduce [assignment ::= variable ASSIGN expression SEMICOLON], go to state 1.
cmdl_Shift 'assignment'
cmdl_Reduce [statements ::= statements statement], go to state 0.
cmdl_Shift 'statements', go to state 1
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements IDENTIFIER]
cmdl_Input 'ASSIGN'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 1.
cmdl_Shift 'variable', go to state 88
cmdl_Shift 'ASSIGN', go to state 17
cmdl_Return. Stack=[statements variable ASSIGN]
cmdl_Input 'VALUE'
cmdl_Shift 'VALUE'
cmdl_Return. Stack=[statements variable ASSIGN VALUE]
cmdl_Input 'SEMICOLON'
cmdl_Reduce [expression ::= VALUE], go to state 17.
cmdl_Shift 'expression', go to state 60
cmdl_Shift 'SEMICOLON'
cmdl_Return. Stack=[statements variable ASSIGN expression SEMICOLON]
cmdl_Input 'IDENTIFIER'
cmdl_Reduce [assignment ::= variable ASSIGN expression SEMICOLON], go to state 1.
cmdl_Shift 'assignment'
cmdl_Reduce [statements ::= statements statement], go to state 0.
cmdl_Shift 'statements', go to state 1
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements IDENTIFIER]
cmdl_Input 'ASSIGN'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 1.
cmdl_Shift 'variable', go to state 88
cmdl_Shift 'ASSIGN', go to state 17
cmdl_Return. Stack=[statements variable ASSIGN]
cmdl_Input 'VALUE'
cmdl_Shift 'VALUE'
cmdl_Return. Stack=[statements variable ASSIGN VALUE]
cmdl_Input 'SEMICOLON'
cmdl_Reduce [expression ::= VALUE], go to state 17.
cmdl_Shift 'expression', go to state 60
cmdl_Shift 'SEMICOLON'
cmdl_Return. Stack=[statements variable ASSIGN expression SEMICOLON]
cmdl_Input 'IDENTIFIER'
cmdl_Reduce [assignment ::= variable ASSIGN expression SEMICOLON], go to state 1.
cmdl_Shift 'assignment'
cmdl_Reduce [statements ::= statements statement], go to state 0.
cmdl_Shift 'statements', go to state 1
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements IDENTIFIER]
cmdl_Input 'ASSIGN'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 1.
cmdl_Shift 'variable', go to state 88
cmdl_Shift 'ASSIGN', go to state 17
cmdl_Return. Stack=[statements variable ASSIGN]
cmdl_Input 'VALUE'
cmdl_Shift 'VALUE'
cmdl_Return. Stack=[statements variable ASSIGN VALUE]
cmdl_Input 'SEMICOLON'
cmdl_Reduce [expression ::= VALUE], go to state 17.
cmdl_Shift 'expression', go to state 60
cmdl_Shift 'SEMICOLON'
cmdl_Return. Stack=[statements variable ASSIGN expression SEMICOLON]
cmdl_Input 'IDENTIFIER'
cmdl_Reduce [assignment ::= variable ASSIGN expression SEMICOLON], go to state 1.
cmdl_Shift 'assignment'
cmdl_Reduce [statements ::= statements statement], go to state 0.
cmdl_Shift 'statements', go to state 1
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements IDENTIFIER]
cmdl_Input 'ASSIGN'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 1.
cmdl_Shift 'variable', go to state 88
cmdl_Shift 'ASSIGN', go to state 17
cmdl_Return. Stack=[statements variable ASSIGN]
cmdl_Input 'VALUE'
cmdl_Shift 'VALUE'
cmdl_Return. Stack=[statements variable ASSIGN VALUE]
cmdl_Input 'SEMICOLON'
cmdl_Reduce [expression ::= VALUE], go to state 17.
cmdl_Shift 'expression', go to state 60
cmdl_Shift 'SEMICOLON'
cmdl_Return. Stack=[statements variable ASSIGN expression SEMICOLON]
cmdl_Input 'IDENTIFIER'
cmdl_Reduce [assignment ::= variable ASSIGN expression SEMICOLON], go to state 1.
cmdl_Shift 'assignment'
cmdl_Reduce [statements ::= statements statement], go to state 0.
cmdl_Shift 'statements', go to state 1
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements IDENTIFIER]
cmdl_Input 'ASSIGN'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 1.
cmdl_Shift 'variable', go to state 88
cmdl_Shift 'ASSIGN', go to state 17
cmdl_Return. Stack=[statements variable ASSIGN]
cmdl_Input 'VALUE'
cmdl_Shift 'VALUE'
cmdl_Return. Stack=[statements variable ASSIGN VALUE]
cmdl_Input 'SEMICOLON'
cmdl_Reduce [expression ::= VALUE], go to state 17.
cmdl_Shift 'expression', go to state 60
cmdl_Shift 'SEMICOLON'
cmdl_Return. Stack=[statements variable ASSIGN expression SEMICOLON]
cmdl_Input 'IDENTIFIER'
cmdl_Reduce [assignment ::= variable ASSIGN expression SEMICOLON], go to state 1.
cmdl_Shift 'assignment'
cmdl_Reduce [statements ::= statements statement], go to state 0.
cmdl_Shift 'statements', go to state 1
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements IDENTIFIER]
cmdl_Input 'ASSIGN'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 1.
cmdl_Shift 'variable', go to state 88
cmdl_Shift 'ASSIGN', go to state 17
cmdl_Return. Stack=[statements variable ASSIGN]
cmdl_Input 'VALUE'
cmdl_Shift 'VALUE'
cmdl_Return. Stack=[statements variable ASSIGN VALUE]
cmdl_Input 'EXP'
cmdl_Reduce [expression ::= VALUE], go to state 17.
cmdl_Shift 'expression', go to state 60
cmdl_Shift 'EXP', go to state 40
cmdl_Return. Stack=[statements variable ASSIGN expression EXP]
cmdl_Input 'VALUE'
cmdl_Shift 'VALUE'
cmdl_Return. Stack=[statements variable ASSIGN expression EXP VALUE]
cmdl_Input 'MULTIPLY'
cmdl_Reduce [expression ::= VALUE], go to state 40.
cmdl_Shift 'expression', go to state 121
cmdl_Reduce [expression ::= expression EXP expression], go to state 17.
cmdl_Shift 'expression', go to state 60
cmdl_Shift 'MULTIPLY', go to state 44
cmdl_Return. Stack=[statements variable ASSIGN expression MULTIPLY]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements variable ASSIGN expression MULTIPLY IDENTIFIER]
cmdl_Input 'SEMICOLON'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 44.
cmdl_Shift 'variable', go to state 124
cmdl_Reduce [expression ::= variable], go to state 44.
cmdl_Shift 'expression', go to state 123
cmdl_Reduce [product ::= expression MULTIPLY expression], go to state 17.
cmdl_Shift 'product'
cmdl_Reduce [expression ::= product], go to state 17.
cmdl_Shift 'expression', go to state 60
cmdl_Shift 'SEMICOLON'
cmdl_Return. Stack=[statements variable ASSIGN expression SEMICOLON]
cmdl_Input 'IDENTIFIER'
cmdl_Reduce [assignment ::= variable ASSIGN expression SEMICOLON], go to state 1.
cmdl_Shift 'assignment'
cmdl_Reduce [statements ::= statements statement], go to state 0.
cmdl_Shift 'statements', go to state 1
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements IDENTIFIER]
cmdl_Input 'ASSIGN'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 1.
cmdl_Shift 'variable', go to state 88
cmdl_Shift 'ASSIGN', go to state 17
cmdl_Return. Stack=[statements variable ASSIGN]
cmdl_Input 'VALUE'
cmdl_Shift 'VALUE'
cmdl_Return. Stack=[statements variable ASSIGN VALUE]
cmdl_Input 'MULTIPLY'
cmdl_Reduce [expression ::= VALUE], go to state 17.
cmdl_Shift 'expression', go to state 60
cmdl_Shift 'MULTIPLY', go to state 44
cmdl_Return. Stack=[statements variable ASSIGN expression MULTIPLY]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements variable ASSIGN expression MULTIPLY IDENTIFIER]
cmdl_Input 'SEMICOLON'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 44.
cmdl_Shift 'variable', go to state 124
cmdl_Reduce [expression ::= variable], go to state 44.
cmdl_Shift 'expression', go to state 123
cmdl_Reduce [product ::= expression MULTIPLY expression], go to state 17.
cmdl_Shift 'product'
cmdl_Reduce [expression ::= product], go to state 17.
cmdl_Shift 'expression', go to state 60
cmdl_Shift 'SEMICOLON'
cmdl_Return. Stack=[statements variable ASSIGN expression SEMICOLON]
cmdl_Input 'IDENTIFIER'
cmdl_Reduce [assignment ::= variable ASSIGN expression SEMICOLON], go to state 1.
cmdl_Shift 'assignment'
cmdl_Reduce [statements ::= statements statement], go to state 0.
cmdl_Shift 'statements', go to state 1
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements IDENTIFIER]
cmdl_Input 'ASSIGN'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 1.
cmdl_Shift 'variable', go to state 88
cmdl_Shift 'ASSIGN', go to state 17
cmdl_Return. Stack=[statements variable ASSIGN]
cmdl_Input 'VALUE'
cmdl_Shift 'VALUE'
cmdl_Return. Stack=[statements variable ASSIGN VALUE]
cmdl_Input 'MULTIPLY'
cmdl_Reduce [expression ::= VALUE], go to state 17.
cmdl_Shift 'expression', go to state 60
cmdl_Shift 'MULTIPLY', go to state 44
cmdl_Return. Stack=[statements variable ASSIGN expression MULTIPLY]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements variable ASSIGN expression MULTIPLY IDENTIFIER]
cmdl_Input 'SEMICOLON'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 44.
cmdl_Shift 'variable', go to state 124
cmdl_Reduce [expression ::= variable], go to state 44.
cmdl_Shift 'expression', go to state 123
cmdl_Reduce [product ::= expression MULTIPLY expression], go to state 17.
cmdl_Shift 'product'
cmdl_Reduce [expression ::= product], go to state 17.
cmdl_Shift 'expression', go to state 60
cmdl_Shift 'SEMICOLON'
cmdl_Return. Stack=[statements variable ASSIGN expression SEMICOLON]
cmdl_Input 'IDENTIFIER'
cmdl_Reduce [assignment ::= variable ASSIGN expression SEMICOLON], go to state 1.
cmdl_Shift 'assignment'
cmdl_Reduce [statements ::= statements statement], go to state 0.
cmdl_Shift 'statements', go to state 1
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements IDENTIFIER]
cmdl_Input 'ASSIGN'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 1.
cmdl_Shift 'variable', go to state 88
cmdl_Shift 'ASSIGN', go to state 17
cmdl_Return. Stack=[statements variable ASSIGN]
cmdl_Input 'VALUE'
cmdl_Shift 'VALUE'
cmdl_Return. Stack=[statements variable ASSIGN VALUE]
cmdl_Input 'MULTIPLY'
cmdl_Reduce [expression ::= VALUE], go to state 17.
cmdl_Shift 'expression', go to state 60
cmdl_Shift 'MULTIPLY', go to state 44
cmdl_Return. Stack=[statements variable ASSIGN expression MULTIPLY]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements variable ASSIGN expression MULTIPLY IDENTIFIER]
cmdl_Input 'SEMICOLON'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 44.
cmdl_Shift 'variable', go to state 124
cmdl_Reduce [expression ::= variable], go to state 44.
cmdl_Shift 'expression', go to state 123
cmdl_Reduce [product ::= expression MULTIPLY expression], go to state 17.
cmdl_Shift 'product'
cmdl_Reduce [expression ::= product], go to state 17.
cmdl_Shift 'expression', go to state 60
cmdl_Shift 'SEMICOLON'
cmdl_Return. Stack=[statements variable ASSIGN expression SEMICOLON]
cmdl_Input 'IDENTIFIER'
cmdl_Reduce [assignment ::= variable ASSIGN expression SEMICOLON], go to state 1.
cmdl_Shift 'assignment'
cmdl_Reduce [statements ::= statements statement], go to state 0.
cmdl_Shift 'statements', go to state 1
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements IDENTIFIER]
cmdl_Input 'ASSIGN'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 1.
cmdl_Shift 'variable', go to state 88
cmdl_Shift 'ASSIGN', go to state 17
cmdl_Return. Stack=[statements variable ASSIGN]
cmdl_Input 'VALUE'
cmdl_Shift 'VALUE'
cmdl_Return. Stack=[statements variable ASSIGN VALUE]
cmdl_Input 'MULTIPLY'
cmdl_Reduce [expression ::= VALUE], go to state 17.
cmdl_Shift 'expression', go to state 60
cmdl_Shift 'MULTIPLY', go to state 44
cmdl_Return. Stack=[statements variable ASSIGN expression MULTIPLY]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements variable ASSIGN expression MULTIPLY IDENTIFIER]
cmdl_Input 'SEMICOLON'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 44.
cmdl_Shift 'variable', go to state 124
cmdl_Reduce [expression ::= variable], go to state 44.
cmdl_Shift 'expression', go to state 123
cmdl_Reduce [product ::= expression MULTIPLY expression], go to state 17.
cmdl_Shift 'product'
cmdl_Reduce [expression ::= product], go to state 17.
cmdl_Shift 'expression', go to state 60
cmdl_Shift 'SEMICOLON'
cmdl_Return. Stack=[statements variable ASSIGN expression SEMICOLON]
cmdl_Input 'IDENTIFIER'
cmdl_Reduce [assignment ::= variable ASSIGN expression SEMICOLON], go to state 1.
cmdl_Shift 'assignment'
cmdl_Reduce [statements ::= statements statement], go to state 0.
cmdl_Shift 'statements', go to state 1
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements IDENTIFIER]
cmdl_Input 'ASSIGN'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 1.
cmdl_Shift 'variable', go to state 88
cmdl_Shift 'ASSIGN', go to state 17
cmdl_Return. Stack=[statements variable ASSIGN]
cmdl_Input 'VALUE'
cmdl_Shift 'VALUE'
cmdl_Return. Stack=[statements variable ASSIGN VALUE]
cmdl_Input 'MULTIPLY'
cmdl_Reduce [expression ::= VALUE], go to state 17.
cmdl_Shift 'expression', go to state 60
cmdl_Shift 'MULTIPLY', go to state 44
cmdl_Return. Stack=[statements variable ASSIGN expression MULTIPLY]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements variable ASSIGN expression MULTIPLY IDENTIFIER]
cmdl_Input 'SEMICOLON'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 44.
cmdl_Shift 'variable', go to state 124
cmdl_Reduce [expression ::= variable], go to state 44.
cmdl_Shift 'expression', go to state 123
cmdl_Reduce [product ::= expression MULTIPLY expression], go to state 17.
cmdl_Shift 'product'
cmdl_Reduce [expression ::= product], go to state 17.
cmdl_Shift 'expression', go to state 60
cmdl_Shift 'SEMICOLON'
cmdl_Return. Stack=[statements variable ASSIGN expression SEMICOLON]
cmdl_Input 'IDENTIFIER'
cmdl_Reduce [assignment ::= variable ASSIGN expression SEMICOLON], go to state 1.
cmdl_Shift 'assignment'
cmdl_Reduce [statements ::= statements statement], go to state 0.
cmdl_Shift 'statements', go to state 1
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements IDENTIFIER]
cmdl_Input 'ASSIGN'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 1.
cmdl_Shift 'variable', go to state 88
cmdl_Shift 'ASSIGN', go to state 17
cmdl_Return. Stack=[statements variable ASSIGN]
cmdl_Input 'VALUE'
cmdl_Shift 'VALUE'
cmdl_Return. Stack=[statements variable ASSIGN VALUE]
cmdl_Input 'MULTIPLY'
cmdl_Reduce [expression ::= VALUE], go to state 17.
cmdl_Shift 'expression', go to state 60
cmdl_Shift 'MULTIPLY', go to state 44
cmdl_Return. Stack=[statements variable ASSIGN expression MULTIPLY]
cmdl_Input 'VALUE'
cmdl_Shift 'VALUE'
cmdl_Return. Stack=[statements variable ASSIGN expression MULTIPLY VALUE]
cmdl_Input 'EXP'
cmdl_Reduce [expression ::= VALUE], go to state 44.
cmdl_Shift 'expression', go to state 123
cmdl_Shift 'EXP', go to state 40
cmdl_Return. Stack=[statements variable ASSIGN expression MULTIPLY expression EXP]
cmdl_Input 'VALUE'
cmdl_Shift 'VALUE'
cmdl_Return. Stack=[statements variable ASSIGN expression MULTIPLY expression EXP VALUE]
cmdl_Input 'MULTIPLY'
cmdl_Reduce [expression ::= VALUE], go to state 40.
cmdl_Shift 'expression', go to state 121
cmdl_Reduce [expression ::= expression EXP expression], go to state 44.
cmdl_Shift 'expression', go to state 123
cmdl_Reduce [product ::= expression MULTIPLY expression], go to state 17.
cmdl_Shift 'product'
cmdl_Reduce [expression ::= product], go to state 17.
cmdl_Shift 'expression', go to state 60
cmdl_Shift 'MULTIPLY', go to state 44
cmdl_Return. Stack=[statements variable ASSIGN expression MULTIPLY]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements variable ASSIGN expression MULTIPLY IDENTIFIER]
cmdl_Input 'SEMICOLON'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 44.
cmdl_Shift 'variable', go to state 124
cmdl_Reduce [expression ::= variable], go to state 44.
cmdl_Shift 'expression', go to state 123
cmdl_Reduce [product ::= expression MULTIPLY expression], go to state 17.
cmdl_Shift 'product'
cmdl_Reduce [expression ::= product], go to state 17.
cmdl_Shift 'expression', go to state 60
cmdl_Shift 'SEMICOLON'
cmdl_Return. Stack=[statements variable ASSIGN expression SEMICOLON]
cmdl_Input 'IDENTIFIER'
cmdl_Reduce [assignment ::= variable ASSIGN expression SEMICOLON], go to state 1.
cmdl_Shift 'assignment'
cmdl_Reduce [statements ::= statements statement], go to state 0.
cmdl_Shift 'statements', go to state 1
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements IDENTIFIER]
cmdl_Input 'ASSIGN'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 1.
cmdl_Shift 'variable', go to state 88
cmdl_Shift 'ASSIGN', go to state 17
cmdl_Return. Stack=[statements variable ASSIGN]
cmdl_Input 'VALUE'
cmdl_Shift 'VALUE'
cmdl_Return. Stack=[statements variable ASSIGN VALUE]
cmdl_Input 'MULTIPLY'
cmdl_Reduce [expression ::= VALUE], go to state 17.
cmdl_Shift 'expression', go to state 60
cmdl_Shift 'MULTIPLY', go to state 44
cmdl_Return. Stack=[statements variable ASSIGN expression MULTIPLY]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements variable ASSIGN expression MULTIPLY IDENTIFIER]
cmdl_Input 'SEMICOLON'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 44.
cmdl_Shift 'variable', go to state 124
cmdl_Reduce [expression ::= variable], go to state 44.
cmdl_Shift 'expression', go to state 123
cmdl_Reduce [product ::= expression MULTIPLY expression], go to state 17.
cmdl_Shift 'product'
cmdl_Reduce [expression ::= product], go to state 17.
cmdl_Shift 'expression', go to state 60
cmdl_Shift 'SEMICOLON'
cmdl_Return. Stack=[statements variable ASSIGN expression SEMICOLON]
cmdl_Input 'IDENTIFIER'
cmdl_Reduce [assignment ::= variable ASSIGN expression SEMICOLON], go to state 1.
cmdl_Shift 'assignment'
cmdl_Reduce [statements ::= statements statement], go to state 0.
cmdl_Shift 'statements', go to state 1
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements IDENTIFIER]
cmdl_Input 'ASSIGN'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 1.
cmdl_Shift 'variable', go to state 88
cmdl_Shift 'ASSIGN', go to state 17
cmdl_Return. Stack=[statements variable ASSIGN]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements variable ASSIGN IDENTIFIER]
cmdl_Input 'SEMICOLON'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 17.
cmdl_Shift 'variable', go to state 124
cmdl_Reduce [expression ::= variable], go to state 17.
cmdl_Shift 'expression', go to state 60
cmdl_Shift 'SEMICOLON'
cmdl_Return. Stack=[statements variable ASSIGN expression SEMICOLON]
cmdl_Input 'IDENTIFIER'
cmdl_Reduce [assignment ::= variable ASSIGN expression SEMICOLON], go to state 1.
cmdl_Shift 'assignment'
cmdl_Reduce [statements ::= statements statement], go to state 0.
cmdl_Shift 'statements', go to state 1
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements IDENTIFIER]
cmdl_Input 'ASSIGN'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 1.
cmdl_Shift 'variable', go to state 88
cmdl_Shift 'ASSIGN', go to state 17
cmdl_Return. Stack=[statements variable ASSIGN]
cmdl_Input 'LEFT_SQUARE'
cmdl_Shift 'LEFT_SQUARE', go to state 24
cmdl_Return. Stack=[statements variable ASSIGN LEFT_SQUARE]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements variable ASSIGN LEFT_SQUARE IDENTIFIER]
cmdl_Input 'PLUS'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 24.
cmdl_Shift 'variable', go to state 124
cmdl_Reduce [expression ::= variable], go to state 24.
cmdl_Shift 'expression', go to state 59
cmdl_Shift 'PLUS', go to state 46
cmdl_Return. Stack=[statements variable ASSIGN LEFT_SQUARE expression PLUS]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements variable ASSIGN LEFT_SQUARE expression PLUS IDENTIFIER]
cmdl_Input 'EQUAL'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 46.
cmdl_Shift 'variable', go to state 124
cmdl_Reduce [expression ::= variable], go to state 46.
cmdl_Shift 'expression', go to state 94
cmdl_Reduce [sum ::= expression PLUS expression], go to state 24.
cmdl_Shift 'sum'
cmdl_Reduce [expression ::= sum], go to state 24.
cmdl_Shift 'expression', go to state 59
cmdl_Shift 'EQUAL', go to state 39
cmdl_Return. Stack=[statements variable ASSIGN LEFT_SQUARE expression EQUAL]
cmdl_Input 'VALUE'
cmdl_Shift 'VALUE'
cmdl_Return. Stack=[statements variable ASSIGN LEFT_SQUARE expression EQUAL VALUE]
cmdl_Input 'QUESTIONMARK'
cmdl_Reduce [expression ::= VALUE], go to state 39.
cmdl_Shift 'expression', go to state 84
cmdl_Reduce [expression ::= expression EQUAL expression], go to state 24.
cmdl_Shift 'expression', go to state 59
cmdl_Shift 'QUESTIONMARK', go to state 49
cmdl_Return. Stack=[statements variable ASSIGN LEFT_SQUARE expression QUESTIONMARK]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements variable ASSIGN LEFT_SQUARE expression QUESTIONMARK IDENTIFIER]
cmdl_Input 'COLON'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 49.
cmdl_Shift 'variable', go to state 124
cmdl_Reduce [expression ::= variable], go to state 49.
cmdl_Shift 'expression', go to state 61
cmdl_Shift 'COLON', go to state 25
cmdl_Return. Stack=[statements variable ASSIGN LEFT_SQUARE expression QUESTIONMARK expression COLON]
cmdl_Input 'LEFT_ROUND'
cmdl_Shift 'LEFT_ROUND', go to state 47
cmdl_Return. Stack=[statements variable ASSIGN LEFT_SQUARE expression QUESTIONMARK expression COLON LEFT_ROUND]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements variable ASSIGN LEFT_SQUARE expression QUESTIONMARK expression COLON LEFT_ROUND IDENTIFIER]
cmdl_Input 'PLUS'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 47.
cmdl_Shift 'variable', go to state 124
cmdl_Reduce [expression ::= variable], go to state 47.
cmdl_Shift 'expression', go to state 62
cmdl_Shift 'PLUS', go to state 46
cmdl_Return. Stack=[statements variable ASSIGN LEFT_SQUARE expression QUESTIONMARK expression COLON LEFT_ROUND expression PLUS]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements variable ASSIGN LEFT_SQUARE expression QUESTIONMARK expression COLON LEFT_ROUND expression PLUS IDENTIFIER]
cmdl_Input 'EQUAL'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 46.
cmdl_Shift 'variable', go to state 124
cmdl_Reduce [expression ::= variable], go to state 46.
cmdl_Shift 'expression', go to state 94
cmdl_Reduce [sum ::= expression PLUS expression], go to state 47.
cmdl_Shift 'sum'
cmdl_Reduce [expression ::= sum], go to state 47.
cmdl_Shift 'expression', go to state 62
cmdl_Shift 'EQUAL', go to state 39
cmdl_Return. Stack=[statements variable ASSIGN LEFT_SQUARE expression QUESTIONMARK expression COLON LEFT_ROUND expression EQUAL]
cmdl_Input 'VALUE'
cmdl_Shift 'VALUE'
cmdl_Return. Stack=[statements variable ASSIGN LEFT_SQUARE expression QUESTIONMARK expression COLON LEFT_ROUND expression EQUAL VALUE]
cmdl_Input 'QUESTIONMARK'
cmdl_Reduce [expression ::= VALUE], go to state 39.
cmdl_Shift 'expression', go to state 84
cmdl_Reduce [expression ::= expression EQUAL expression], go to state 47.
cmdl_Shift 'expression', go to state 62
cmdl_Shift 'QUESTIONMARK', go to state 49
cmdl_Return. Stack=[statements variable ASSIGN LEFT_SQUARE expression QUESTIONMARK expression COLON LEFT_ROUND expression QUESTIONMARK]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements variable ASSIGN LEFT_SQUARE expression QUESTIONMARK expression COLON LEFT_ROUND expression QUESTIONMARK IDENTIFIER]
cmdl_Input 'COLON'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 49.
cmdl_Shift 'variable', go to state 124
cmdl_Reduce [expression ::= variable], go to state 49.
cmdl_Shift 'expression', go to state 61
cmdl_Shift 'COLON', go to state 25
cmdl_Return. Stack=[statements variable ASSIGN LEFT_SQUARE expression QUESTIONMARK expression COLON LEFT_ROUND expression QUESTIONMARK expression COLON]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements variable ASSIGN LEFT_SQUARE expression QUESTIONMARK expression COLON LEFT_ROUND expression QUESTIONMARK expression COLON IDENTIFIER]
cmdl_Input 'RIGHT_ROUND'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 25.
cmdl_Shift 'variable', go to state 124
cmdl_Reduce [expression ::= variable], go to state 25.
cmdl_Shift 'expression', go to state 71
cmdl_Reduce [comparison ::= expression QUESTIONMARK expression COLON expression], go to state 47.
cmdl_Shift 'comparison'
cmdl_Reduce [expression ::= comparison], go to state 47.
cmdl_Shift 'expression', go to state 62
cmdl_Shift 'RIGHT_ROUND'
cmdl_Return. Stack=[statements variable ASSIGN LEFT_SQUARE expression QUESTIONMARK expression COLON LEFT_ROUND expression RIGHT_ROUND]
cmdl_Input 'RIGHT_SQUARE'
cmdl_Reduce [expression ::= LEFT_ROUND expression RIGHT_ROUND], go to state 25.
cmdl_Shift 'expression', go to state 71
cmdl_Reduce [comparison ::= expression QUESTIONMARK expression COLON expression], go to state 24.
cmdl_Shift 'comparison'
cmdl_Reduce [expression ::= comparison], go to state 24.
cmdl_Shift 'expression', go to state 59
cmdl_Shift 'RIGHT_SQUARE', go to state 116
cmdl_Return. Stack=[statements variable ASSIGN LEFT_SQUARE expression RIGHT_SQUARE]
cmdl_Input 'SEMICOLON'
cmdl_Shift 'SEMICOLON'
cmdl_Return. Stack=[statements variable ASSIGN LEFT_SQUARE expression RIGHT_SQUARE SEMICOLON]
cmdl_Input 'DOLLAR'
cmdl_Reduce [assignment ::= variable ASSIGN LEFT_SQUARE expression RIGHT_SQUARE SEMICOLON], go to state 1.
cmdl_Shift 'assignment'
cmdl_Reduce [statements ::= statements statement], go to state 0.
cmdl_Shift 'statements', go to state 1
cmdl_Shift 'DOLLAR', go to state 55
cmdl_Return. Stack=[statements DOLLAR]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements DOLLAR IDENTIFIER]
cmdl_Input 'ARROW'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 55.
cmdl_Shift 'variable', go to state 114
cmdl_Reduce [reactionLeftComponent ::= DOLLAR variable], go to state 1.
cmdl_Shift 'reactionLeftComponent'
cmdl_Reduce [reactionLeftSide ::= reactionLeftComponent], go to state 1.
cmdl_Shift 'reactionLeftSide', go to state 97
cmdl_Shift 'ARROW', go to state 2
cmdl_Return. Stack=[statements reactionLeftSide ARROW]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements reactionLeftSide ARROW IDENTIFIER]
cmdl_Input 'COMMA'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 2.
cmdl_Shift 'variable', go to state 87
cmdl_Reduce [reactionRightComponent ::= variable], go to state 2.
cmdl_Shift 'reactionRightComponent'
cmdl_Reduce [reactionRightSide ::= reactionRightComponent], go to state 2.
cmdl_Shift 'reactionRightSide', go to state 96
cmdl_Shift 'COMMA', go to state 6
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA IDENTIFIER]
cmdl_Input 'SEMICOLON'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 6.
cmdl_Shift 'variable', go to state 99
cmdl_Reduce [expression ::= variable], go to state 6.
cmdl_Shift 'expression', go to state 64
cmdl_Reduce [reactionSpecifier ::= expression], go to state 6.
cmdl_Shift 'reactionSpecifier'
cmdl_Reduce [reactionSpecifiers ::= reactionSpecifier], go to state 6.
cmdl_Shift 'reactionSpecifiers', go to state 95
cmdl_Shift 'SEMICOLON'
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA reactionSpecifiers SEMICOLON]
cmdl_Input 'DOLLAR'
cmdl_Reduce [reaction ::= reactionLeftSide ARROW reactionRightSide COMMA reactionSpecifiers SEMICOLON], go to state 1.
cmdl_Shift 'reaction'
cmdl_Reduce [statements ::= statements statement], go to state 0.
cmdl_Shift 'statements', go to state 1
cmdl_Shift 'DOLLAR', go to state 55
cmdl_Return. Stack=[statements DOLLAR]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements DOLLAR IDENTIFIER]
cmdl_Input 'ARROW'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 55.
cmdl_Shift 'variable', go to state 114
cmdl_Reduce [reactionLeftComponent ::= DOLLAR variable], go to state 1.
cmdl_Shift 'reactionLeftComponent'
cmdl_Reduce [reactionLeftSide ::= reactionLeftComponent], go to state 1.
cmdl_Shift 'reactionLeftSide', go to state 97
cmdl_Shift 'ARROW', go to state 2
cmdl_Return. Stack=[statements reactionLeftSide ARROW]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements reactionLeftSide ARROW IDENTIFIER]
cmdl_Input 'COMMA'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 2.
cmdl_Shift 'variable', go to state 87
cmdl_Reduce [reactionRightComponent ::= variable], go to state 2.
cmdl_Shift 'reactionRightComponent'
cmdl_Reduce [reactionRightSide ::= reactionRightComponent], go to state 2.
cmdl_Shift 'reactionRightSide', go to state 96
cmdl_Shift 'COMMA', go to state 6
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA IDENTIFIER]
cmdl_Input 'SEMICOLON'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 6.
cmdl_Shift 'variable', go to state 99
cmdl_Reduce [expression ::= variable], go to state 6.
cmdl_Shift 'expression', go to state 64
cmdl_Reduce [reactionSpecifier ::= expression], go to state 6.
cmdl_Shift 'reactionSpecifier'
cmdl_Reduce [reactionSpecifiers ::= reactionSpecifier], go to state 6.
cmdl_Shift 'reactionSpecifiers', go to state 95
cmdl_Shift 'SEMICOLON'
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA reactionSpecifiers SEMICOLON]
cmdl_Input 'DOLLAR'
cmdl_Reduce [reaction ::= reactionLeftSide ARROW reactionRightSide COMMA reactionSpecifiers SEMICOLON], go to state 1.
cmdl_Shift 'reaction'
cmdl_Reduce [statements ::= statements statement], go to state 0.
cmdl_Shift 'statements', go to state 1
cmdl_Shift 'DOLLAR', go to state 55
cmdl_Return. Stack=[statements DOLLAR]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements DOLLAR IDENTIFIER]
cmdl_Input 'ARROW'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 55.
cmdl_Shift 'variable', go to state 114
cmdl_Reduce [reactionLeftComponent ::= DOLLAR variable], go to state 1.
cmdl_Shift 'reactionLeftComponent'
cmdl_Reduce [reactionLeftSide ::= reactionLeftComponent], go to state 1.
cmdl_Shift 'reactionLeftSide', go to state 97
cmdl_Shift 'ARROW', go to state 2
cmdl_Return. Stack=[statements reactionLeftSide ARROW]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements reactionLeftSide ARROW IDENTIFIER]
cmdl_Input 'COMMA'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 2.
cmdl_Shift 'variable', go to state 87
cmdl_Reduce [reactionRightComponent ::= variable], go to state 2.
cmdl_Shift 'reactionRightComponent'
cmdl_Reduce [reactionRightSide ::= reactionRightComponent], go to state 2.
cmdl_Shift 'reactionRightSide', go to state 96
cmdl_Shift 'COMMA', go to state 6
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA IDENTIFIER]
cmdl_Input 'SEMICOLON'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 6.
cmdl_Shift 'variable', go to state 99
cmdl_Reduce [expression ::= variable], go to state 6.
cmdl_Shift 'expression', go to state 64
cmdl_Reduce [reactionSpecifier ::= expression], go to state 6.
cmdl_Shift 'reactionSpecifier'
cmdl_Reduce [reactionSpecifiers ::= reactionSpecifier], go to state 6.
cmdl_Shift 'reactionSpecifiers', go to state 95
cmdl_Shift 'SEMICOLON'
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA reactionSpecifiers SEMICOLON]
cmdl_Input 'IDENTIFIER'
cmdl_Reduce [reaction ::= reactionLeftSide ARROW reactionRightSide COMMA reactionSpecifiers SEMICOLON], go to state 1.
cmdl_Shift 'reaction'
cmdl_Reduce [statements ::= statements statement], go to state 0.
cmdl_Shift 'statements', go to state 1
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements IDENTIFIER]
cmdl_Input 'PLUS'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 1.
cmdl_Shift 'variable', go to state 88
cmdl_Reduce [reactionLeftComponent ::= variable], go to state 1.
cmdl_Shift 'reactionLeftComponent'
cmdl_Reduce [reactionLeftSide ::= reactionLeftComponent], go to state 1.
cmdl_Shift 'reactionLeftSide', go to state 97
cmdl_Shift 'PLUS', go to state 11
cmdl_Return. Stack=[statements reactionLeftSide PLUS]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements reactionLeftSide PLUS IDENTIFIER]
cmdl_Input 'ARROW'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 11.
cmdl_Shift 'variable', go to state 90
cmdl_Reduce [reactionLeftComponent ::= variable], go to state 11.
cmdl_Shift 'reactionLeftComponent'
cmdl_Reduce [reactionLeftSide ::= reactionLeftSide PLUS reactionLeftComponent], go to state 1.
cmdl_Shift 'reactionLeftSide', go to state 97
cmdl_Shift 'ARROW', go to state 2
cmdl_Return. Stack=[statements reactionLeftSide ARROW]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements reactionLeftSide ARROW IDENTIFIER]
cmdl_Input 'LEFT_CURLY'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 2.
cmdl_Shift 'variable', go to state 87
cmdl_Shift 'LEFT_CURLY', go to state 15
cmdl_Return. Stack=[statements reactionLeftSide ARROW variable LEFT_CURLY]
cmdl_Input 'VALUE'
cmdl_Shift 'VALUE'
cmdl_Return. Stack=[statements reactionLeftSide ARROW variable LEFT_CURLY VALUE]
cmdl_Input 'COMMA'
cmdl_Reduce [expression ::= VALUE], go to state 15.
cmdl_Shift 'expression', go to state 69
cmdl_Reduce [moleculePropertyExpressions ::= expression], go to state 15.
cmdl_Shift 'moleculePropertyExpressions', go to state 104
cmdl_Shift 'COMMA', go to state 22
cmdl_Return. Stack=[statements reactionLeftSide ARROW variable LEFT_CURLY moleculePropertyExpressions COMMA]
cmdl_Input 'VALUE'
cmdl_Shift 'VALUE'
cmdl_Return. Stack=[statements reactionLeftSide ARROW variable LEFT_CURLY moleculePropertyExpressions COMMA VALUE]
cmdl_Input 'RIGHT_CURLY'
cmdl_Reduce [expression ::= VALUE], go to state 22.
cmdl_Shift 'expression', go to state 68
cmdl_Reduce [moleculePropertyExpressions ::= moleculePropertyExpressions COMMA expression], go to state 15.
cmdl_Shift 'moleculePropertyExpressions', go to state 104
cmdl_Shift 'RIGHT_CURLY'
cmdl_Return. Stack=[statements reactionLeftSide ARROW variable LEFT_CURLY moleculePropertyExpressions RIGHT_CURLY]
cmdl_Input 'COMMA'
cmdl_Reduce [reactionRightComponent ::= variable LEFT_CURLY moleculePropertyExpressions RIGHT_CURLY], go to state 2.
cmdl_Shift 'reactionRightComponent'
cmdl_Reduce [reactionRightSide ::= reactionRightComponent], go to state 2.
cmdl_Shift 'reactionRightSide', go to state 96
cmdl_Shift 'COMMA', go to state 6
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA IDENTIFIER]
cmdl_Input 'SEMICOLON'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 6.
cmdl_Shift 'variable', go to state 99
cmdl_Reduce [expression ::= variable], go to state 6.
cmdl_Shift 'expression', go to state 64
cmdl_Reduce [reactionSpecifier ::= expression], go to state 6.
cmdl_Shift 'reactionSpecifier'
cmdl_Reduce [reactionSpecifiers ::= reactionSpecifier], go to state 6.
cmdl_Shift 'reactionSpecifiers', go to state 95
cmdl_Shift 'SEMICOLON'
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA reactionSpecifiers SEMICOLON]
cmdl_Input 'IDENTIFIER'
cmdl_Reduce [reaction ::= reactionLeftSide ARROW reactionRightSide COMMA reactionSpecifiers SEMICOLON], go to state 1.
cmdl_Shift 'reaction'
cmdl_Reduce [statements ::= statements statement], go to state 0.
cmdl_Shift 'statements', go to state 1
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements IDENTIFIER]
cmdl_Input 'PLUS'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 1.
cmdl_Shift 'variable', go to state 88
cmdl_Reduce [reactionLeftComponent ::= variable], go to state 1.
cmdl_Shift 'reactionLeftComponent'
cmdl_Reduce [reactionLeftSide ::= reactionLeftComponent], go to state 1.
cmdl_Shift 'reactionLeftSide', go to state 97
cmdl_Shift 'PLUS', go to state 11
cmdl_Return. Stack=[statements reactionLeftSide PLUS]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements reactionLeftSide PLUS IDENTIFIER]
cmdl_Input 'ARROW'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 11.
cmdl_Shift 'variable', go to state 90
cmdl_Reduce [reactionLeftComponent ::= variable], go to state 11.
cmdl_Shift 'reactionLeftComponent'
cmdl_Reduce [reactionLeftSide ::= reactionLeftSide PLUS reactionLeftComponent], go to state 1.
cmdl_Shift 'reactionLeftSide', go to state 97
cmdl_Shift 'ARROW', go to state 2
cmdl_Return. Stack=[statements reactionLeftSide ARROW]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements reactionLeftSide ARROW IDENTIFIER]
cmdl_Input 'LEFT_CURLY'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 2.
cmdl_Shift 'variable', go to state 87
cmdl_Shift 'LEFT_CURLY', go to state 15
cmdl_Return. Stack=[statements reactionLeftSide ARROW variable LEFT_CURLY]
cmdl_Input 'VALUE'
cmdl_Shift 'VALUE'
cmdl_Return. Stack=[statements reactionLeftSide ARROW variable LEFT_CURLY VALUE]
cmdl_Input 'COMMA'
cmdl_Reduce [expression ::= VALUE], go to state 15.
cmdl_Shift 'expression', go to state 69
cmdl_Reduce [moleculePropertyExpressions ::= expression], go to state 15.
cmdl_Shift 'moleculePropertyExpressions', go to state 104
cmdl_Shift 'COMMA', go to state 22
cmdl_Return. Stack=[statements reactionLeftSide ARROW variable LEFT_CURLY moleculePropertyExpressions COMMA]
cmdl_Input 'VALUE'
cmdl_Shift 'VALUE'
cmdl_Return. Stack=[statements reactionLeftSide ARROW variable LEFT_CURLY moleculePropertyExpressions COMMA VALUE]
cmdl_Input 'RIGHT_CURLY'
cmdl_Reduce [expression ::= VALUE], go to state 22.
cmdl_Shift 'expression', go to state 68
cmdl_Reduce [moleculePropertyExpressions ::= moleculePropertyExpressions COMMA expression], go to state 15.
cmdl_Shift 'moleculePropertyExpressions', go to state 104
cmdl_Shift 'RIGHT_CURLY'
cmdl_Return. Stack=[statements reactionLeftSide ARROW variable LEFT_CURLY moleculePropertyExpressions RIGHT_CURLY]
cmdl_Input 'COMMA'
cmdl_Reduce [reactionRightComponent ::= variable LEFT_CURLY moleculePropertyExpressions RIGHT_CURLY], go to state 2.
cmdl_Shift 'reactionRightComponent'
cmdl_Reduce [reactionRightSide ::= reactionRightComponent], go to state 2.
cmdl_Shift 'reactionRightSide', go to state 96
cmdl_Shift 'COMMA', go to state 6
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA IDENTIFIER]
cmdl_Input 'SEMICOLON'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 6.
cmdl_Shift 'variable', go to state 99
cmdl_Reduce [expression ::= variable], go to state 6.
cmdl_Shift 'expression', go to state 64
cmdl_Reduce [reactionSpecifier ::= expression], go to state 6.
cmdl_Shift 'reactionSpecifier'
cmdl_Reduce [reactionSpecifiers ::= reactionSpecifier], go to state 6.
cmdl_Shift 'reactionSpecifiers', go to state 95
cmdl_Shift 'SEMICOLON'
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA reactionSpecifiers SEMICOLON]
cmdl_Input 'DOLLAR'
cmdl_Reduce [reaction ::= reactionLeftSide ARROW reactionRightSide COMMA reactionSpecifiers SEMICOLON], go to state 1.
cmdl_Shift 'reaction'
cmdl_Reduce [statements ::= statements statement], go to state 0.
cmdl_Shift 'statements', go to state 1
cmdl_Shift 'DOLLAR', go to state 55
cmdl_Return. Stack=[statements DOLLAR]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements DOLLAR IDENTIFIER]
cmdl_Input 'LEFT_CURLY'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 55.
cmdl_Shift 'variable', go to state 114
cmdl_Shift 'LEFT_CURLY', go to state 51
cmdl_Return. Stack=[statements DOLLAR variable LEFT_CURLY]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements DOLLAR variable LEFT_CURLY IDENTIFIER]
cmdl_Input 'COMMA'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 51.
cmdl_Shift 'variable'
cmdl_Reduce [moleculePropertyNames ::= variable], go to state 51.
cmdl_Shift 'moleculePropertyNames', go to state 106
cmdl_Shift 'COMMA', go to state 56
cmdl_Return. Stack=[statements DOLLAR variable LEFT_CURLY moleculePropertyNames COMMA]
cmdl_Input 'RIGHT_CURLY'
cmdl_Reduce [moleculePropertyNames ::= moleculePropertyNames COMMA], go to state 51.
cmdl_Shift 'moleculePropertyNames', go to state 106
cmdl_Shift 'RIGHT_CURLY'
cmdl_Return. Stack=[statements DOLLAR variable LEFT_CURLY moleculePropertyNames RIGHT_CURLY]
cmdl_Input 'PLUS'
cmdl_Reduce [reactionLeftComponent ::= DOLLAR variable LEFT_CURLY moleculePropertyNames RIGHT_CURLY], go to state 1.
cmdl_Shift 'reactionLeftComponent'
cmdl_Reduce [reactionLeftSide ::= reactionLeftComponent], go to state 1.
cmdl_Shift 'reactionLeftSide', go to state 97
cmdl_Shift 'PLUS', go to state 11
cmdl_Return. Stack=[statements reactionLeftSide PLUS]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements reactionLeftSide PLUS IDENTIFIER]
cmdl_Input 'ARROW'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 11.
cmdl_Shift 'variable', go to state 90
cmdl_Reduce [reactionLeftComponent ::= variable], go to state 11.
cmdl_Shift 'reactionLeftComponent'
cmdl_Reduce [reactionLeftSide ::= reactionLeftSide PLUS reactionLeftComponent], go to state 1.
cmdl_Shift 'reactionLeftSide', go to state 97
cmdl_Shift 'ARROW', go to state 2
cmdl_Return. Stack=[statements reactionLeftSide ARROW]
cmdl_Input 'DOLLAR'
cmdl_Shift 'DOLLAR', go to state 54
cmdl_Return. Stack=[statements reactionLeftSide ARROW DOLLAR]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements reactionLeftSide ARROW DOLLAR IDENTIFIER]
cmdl_Input 'LEFT_CURLY'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 54.
cmdl_Shift 'variable', go to state 112
cmdl_Shift 'LEFT_CURLY', go to state 14
cmdl_Return. Stack=[statements reactionLeftSide ARROW DOLLAR variable LEFT_CURLY]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements reactionLeftSide ARROW DOLLAR variable LEFT_CURLY IDENTIFIER]
cmdl_Input 'PLUS'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 14.
cmdl_Shift 'variable', go to state 124
cmdl_Reduce [expression ::= variable], go to state 14.
cmdl_Shift 'expression', go to state 69
cmdl_Shift 'PLUS', go to state 46
cmdl_Return. Stack=[statements reactionLeftSide ARROW DOLLAR variable LEFT_CURLY expression PLUS]
cmdl_Input 'VALUE'
cmdl_Shift 'VALUE'
cmdl_Return. Stack=[statements reactionLeftSide ARROW DOLLAR variable LEFT_CURLY expression PLUS VALUE]
cmdl_Input 'COMMA'
cmdl_Reduce [expression ::= VALUE], go to state 46.
cmdl_Shift 'expression', go to state 94
cmdl_Reduce [sum ::= expression PLUS expression], go to state 14.
cmdl_Shift 'sum'
cmdl_Reduce [expression ::= sum], go to state 14.
cmdl_Shift 'expression', go to state 69
cmdl_Reduce [moleculePropertyExpressions ::= expression], go to state 14.
cmdl_Shift 'moleculePropertyExpressions', go to state 103
cmdl_Shift 'COMMA', go to state 22
cmdl_Return. Stack=[statements reactionLeftSide ARROW DOLLAR variable LEFT_CURLY moleculePropertyExpressions COMMA]
cmdl_Input 'RIGHT_CURLY'
cmdl_Reduce [moleculePropertyExpressions ::= moleculePropertyExpressions COMMA], go to state 14.
cmdl_Shift 'moleculePropertyExpressions', go to state 103
cmdl_Shift 'RIGHT_CURLY'
cmdl_Return. Stack=[statements reactionLeftSide ARROW DOLLAR variable LEFT_CURLY moleculePropertyExpressions RIGHT_CURLY]
cmdl_Input 'COMMA'
cmdl_Reduce [reactionRightComponent ::= DOLLAR variable LEFT_CURLY moleculePropertyExpressions RIGHT_CURLY], go to state 2.
cmdl_Shift 'reactionRightComponent'
cmdl_Reduce [reactionRightSide ::= reactionRightComponent], go to state 2.
cmdl_Shift 'reactionRightSide', go to state 96
cmdl_Shift 'COMMA', go to state 6
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA IDENTIFIER]
cmdl_Input 'SEMICOLON'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 6.
cmdl_Shift 'variable', go to state 99
cmdl_Reduce [expression ::= variable], go to state 6.
cmdl_Shift 'expression', go to state 64
cmdl_Reduce [reactionSpecifier ::= expression], go to state 6.
cmdl_Shift 'reactionSpecifier'
cmdl_Reduce [reactionSpecifiers ::= reactionSpecifier], go to state 6.
cmdl_Shift 'reactionSpecifiers', go to state 95
cmdl_Shift 'SEMICOLON'
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA reactionSpecifiers SEMICOLON]
cmdl_Input 'DOLLAR'
cmdl_Reduce [reaction ::= reactionLeftSide ARROW reactionRightSide COMMA reactionSpecifiers SEMICOLON], go to state 1.
cmdl_Shift 'reaction'
cmdl_Reduce [statements ::= statements statement], go to state 0.
cmdl_Shift 'statements', go to state 1
cmdl_Shift 'DOLLAR', go to state 55
cmdl_Return. Stack=[statements DOLLAR]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements DOLLAR IDENTIFIER]
cmdl_Input 'LEFT_CURLY'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 55.
cmdl_Shift 'variable', go to state 114
cmdl_Shift 'LEFT_CURLY', go to state 51
cmdl_Return. Stack=[statements DOLLAR variable LEFT_CURLY]
cmdl_Input 'COMMA'
cmdl_Reduce [moleculePropertyNames ::=], go to state 51.
cmdl_Shift 'moleculePropertyNames', go to state 106
cmdl_Shift 'COMMA', go to state 56
cmdl_Return. Stack=[statements DOLLAR variable LEFT_CURLY moleculePropertyNames COMMA]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements DOLLAR variable LEFT_CURLY moleculePropertyNames COMMA IDENTIFIER]
cmdl_Input 'RIGHT_CURLY'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 56.
cmdl_Shift 'variable'
cmdl_Reduce [moleculePropertyNames ::= moleculePropertyNames COMMA variable], go to state 51.
cmdl_Shift 'moleculePropertyNames', go to state 106
cmdl_Shift 'RIGHT_CURLY'
cmdl_Return. Stack=[statements DOLLAR variable LEFT_CURLY moleculePropertyNames RIGHT_CURLY]
cmdl_Input 'PLUS'
cmdl_Reduce [reactionLeftComponent ::= DOLLAR variable LEFT_CURLY moleculePropertyNames RIGHT_CURLY], go to state 1.
cmdl_Shift 'reactionLeftComponent'
cmdl_Reduce [reactionLeftSide ::= reactionLeftComponent], go to state 1.
cmdl_Shift 'reactionLeftSide', go to state 97
cmdl_Shift 'PLUS', go to state 11
cmdl_Return. Stack=[statements reactionLeftSide PLUS]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements reactionLeftSide PLUS IDENTIFIER]
cmdl_Input 'ARROW'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 11.
cmdl_Shift 'variable', go to state 90
cmdl_Reduce [reactionLeftComponent ::= variable], go to state 11.
cmdl_Shift 'reactionLeftComponent'
cmdl_Reduce [reactionLeftSide ::= reactionLeftSide PLUS reactionLeftComponent], go to state 1.
cmdl_Shift 'reactionLeftSide', go to state 97
cmdl_Shift 'ARROW', go to state 2
cmdl_Return. Stack=[statements reactionLeftSide ARROW]
cmdl_Input 'DOLLAR'
cmdl_Shift 'DOLLAR', go to state 54
cmdl_Return. Stack=[statements reactionLeftSide ARROW DOLLAR]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements reactionLeftSide ARROW DOLLAR IDENTIFIER]
cmdl_Input 'LEFT_CURLY'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 54.
cmdl_Shift 'variable', go to state 112
cmdl_Shift 'LEFT_CURLY', go to state 14
cmdl_Return. Stack=[statements reactionLeftSide ARROW DOLLAR variable LEFT_CURLY]
cmdl_Input 'COMMA'
cmdl_Reduce [moleculePropertyExpressions ::=], go to state 14.
cmdl_Shift 'moleculePropertyExpressions', go to state 103
cmdl_Shift 'COMMA', go to state 22
cmdl_Return. Stack=[statements reactionLeftSide ARROW DOLLAR variable LEFT_CURLY moleculePropertyExpressions COMMA]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements reactionLeftSide ARROW DOLLAR variable LEFT_CURLY moleculePropertyExpressions COMMA IDENTIFIER]
cmdl_Input 'PLUS'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 22.
cmdl_Shift 'variable', go to state 124
cmdl_Reduce [expression ::= variable], go to state 22.
cmdl_Shift 'expression', go to state 68
cmdl_Shift 'PLUS', go to state 46
cmdl_Return. Stack=[statements reactionLeftSide ARROW DOLLAR variable LEFT_CURLY moleculePropertyExpressions COMMA expression PLUS]
cmdl_Input 'VALUE'
cmdl_Shift 'VALUE'
cmdl_Return. Stack=[statements reactionLeftSide ARROW DOLLAR variable LEFT_CURLY moleculePropertyExpressions COMMA expression PLUS VALUE]
cmdl_Input 'RIGHT_CURLY'
cmdl_Reduce [expression ::= VALUE], go to state 46.
cmdl_Shift 'expression', go to state 94
cmdl_Reduce [sum ::= expression PLUS expression], go to state 22.
cmdl_Shift 'sum'
cmdl_Reduce [expression ::= sum], go to state 22.
cmdl_Shift 'expression', go to state 68
cmdl_Reduce [moleculePropertyExpressions ::= moleculePropertyExpressions COMMA expression], go to state 14.
cmdl_Shift 'moleculePropertyExpressions', go to state 103
cmdl_Shift 'RIGHT_CURLY'
cmdl_Return. Stack=[statements reactionLeftSide ARROW DOLLAR variable LEFT_CURLY moleculePropertyExpressions RIGHT_CURLY]
cmdl_Input 'COMMA'
cmdl_Reduce [reactionRightComponent ::= DOLLAR variable LEFT_CURLY moleculePropertyExpressions RIGHT_CURLY], go to state 2.
cmdl_Shift 'reactionRightComponent'
cmdl_Reduce [reactionRightSide ::= reactionRightComponent], go to state 2.
cmdl_Shift 'reactionRightSide', go to state 96
cmdl_Shift 'COMMA', go to state 6
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA IDENTIFIER]
cmdl_Input 'SEMICOLON'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 6.
cmdl_Shift 'variable', go to state 99
cmdl_Reduce [expression ::= variable], go to state 6.
cmdl_Shift 'expression', go to state 64
cmdl_Reduce [reactionSpecifier ::= expression], go to state 6.
cmdl_Shift 'reactionSpecifier'
cmdl_Reduce [reactionSpecifiers ::= reactionSpecifier], go to state 6.
cmdl_Shift 'reactionSpecifiers', go to state 95
cmdl_Shift 'SEMICOLON'
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA reactionSpecifiers SEMICOLON]
cmdl_Input 'DOLLAR'
cmdl_Reduce [reaction ::= reactionLeftSide ARROW reactionRightSide COMMA reactionSpecifiers SEMICOLON], go to state 1.
cmdl_Shift 'reaction'
cmdl_Reduce [statements ::= statements statement], go to state 0.
cmdl_Shift 'statements', go to state 1
cmdl_Shift 'DOLLAR', go to state 55
cmdl_Return. Stack=[statements DOLLAR]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements DOLLAR IDENTIFIER]
cmdl_Input 'PLUS'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 55.
cmdl_Shift 'variable', go to state 114
cmdl_Reduce [reactionLeftComponent ::= DOLLAR variable], go to state 1.
cmdl_Shift 'reactionLeftComponent'
cmdl_Reduce [reactionLeftSide ::= reactionLeftComponent], go to state 1.
cmdl_Shift 'reactionLeftSide', go to state 97
cmdl_Shift 'PLUS', go to state 11
cmdl_Return. Stack=[statements reactionLeftSide PLUS]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements reactionLeftSide PLUS IDENTIFIER]
cmdl_Input 'ARROW'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 11.
cmdl_Shift 'variable', go to state 90
cmdl_Reduce [reactionLeftComponent ::= variable], go to state 11.
cmdl_Shift 'reactionLeftComponent'
cmdl_Reduce [reactionLeftSide ::= reactionLeftSide PLUS reactionLeftComponent], go to state 1.
cmdl_Shift 'reactionLeftSide', go to state 97
cmdl_Shift 'ARROW', go to state 2
cmdl_Return. Stack=[statements reactionLeftSide ARROW]
cmdl_Input 'COMMA'
cmdl_Reduce [reactionRightSide ::=], go to state 2.
cmdl_Shift 'reactionRightSide', go to state 96
cmdl_Shift 'COMMA', go to state 6
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA IDENTIFIER]
cmdl_Input 'SEMICOLON'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 6.
cmdl_Shift 'variable', go to state 99
cmdl_Reduce [expression ::= variable], go to state 6.
cmdl_Shift 'expression', go to state 64
cmdl_Reduce [reactionSpecifier ::= expression], go to state 6.
cmdl_Shift 'reactionSpecifier'
cmdl_Reduce [reactionSpecifiers ::= reactionSpecifier], go to state 6.
cmdl_Shift 'reactionSpecifiers', go to state 95
cmdl_Shift 'SEMICOLON'
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA reactionSpecifiers SEMICOLON]
cmdl_Input 'DOLLAR'
cmdl_Reduce [reaction ::= reactionLeftSide ARROW reactionRightSide COMMA reactionSpecifiers SEMICOLON], go to state 1.
cmdl_Shift 'reaction'
cmdl_Reduce [statements ::= statements statement], go to state 0.
cmdl_Shift 'statements', go to state 1
cmdl_Shift 'DOLLAR', go to state 55
cmdl_Return. Stack=[statements DOLLAR]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements DOLLAR IDENTIFIER]
cmdl_Input 'PLUS'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 55.
cmdl_Shift 'variable', go to state 114
cmdl_Reduce [reactionLeftComponent ::= DOLLAR variable], go to state 1.
cmdl_Shift 'reactionLeftComponent'
cmdl_Reduce [reactionLeftSide ::= reactionLeftComponent], go to state 1.
cmdl_Shift 'reactionLeftSide', go to state 97
cmdl_Shift 'PLUS', go to state 11
cmdl_Return. Stack=[statements reactionLeftSide PLUS]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements reactionLeftSide PLUS IDENTIFIER]
cmdl_Input 'ARROW'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 11.
cmdl_Shift 'variable', go to state 90
cmdl_Reduce [reactionLeftComponent ::= variable], go to state 11.
cmdl_Shift 'reactionLeftComponent'
cmdl_Reduce [reactionLeftSide ::= reactionLeftSide PLUS reactionLeftComponent], go to state 1.
cmdl_Shift 'reactionLeftSide', go to state 97
cmdl_Shift 'ARROW', go to state 2
cmdl_Return. Stack=[statements reactionLeftSide ARROW]
cmdl_Input 'COMMA'
cmdl_Reduce [reactionRightSide ::=], go to state 2.
cmdl_Shift 'reactionRightSide', go to state 96
cmdl_Shift 'COMMA', go to state 6
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA IDENTIFIER]
cmdl_Input 'SEMICOLON'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 6.
cmdl_Shift 'variable', go to state 99
cmdl_Reduce [expression ::= variable], go to state 6.
cmdl_Shift 'expression', go to state 64
cmdl_Reduce [reactionSpecifier ::= expression], go to state 6.
cmdl_Shift 'reactionSpecifier'
cmdl_Reduce [reactionSpecifiers ::= reactionSpecifier], go to state 6.
cmdl_Shift 'reactionSpecifiers', go to state 95
cmdl_Shift 'SEMICOLON'
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA reactionSpecifiers SEMICOLON]
cmdl_Input 'DOLLAR'
cmdl_Reduce [reaction ::= reactionLeftSide ARROW reactionRightSide COMMA reactionSpecifiers SEMICOLON], go to state 1.
cmdl_Shift 'reaction'
cmdl_Reduce [statements ::= statements statement], go to state 0.
cmdl_Shift 'statements', go to state 1
cmdl_Shift 'DOLLAR', go to state 55
cmdl_Return. Stack=[statements DOLLAR]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements DOLLAR IDENTIFIER]
cmdl_Input 'PLUS'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 55.
cmdl_Shift 'variable', go to state 114
cmdl_Reduce [reactionLeftComponent ::= DOLLAR variable], go to state 1.
cmdl_Shift 'reactionLeftComponent'
cmdl_Reduce [reactionLeftSide ::= reactionLeftComponent], go to state 1.
cmdl_Shift 'reactionLeftSide', go to state 97
cmdl_Shift 'PLUS', go to state 11
cmdl_Return. Stack=[statements reactionLeftSide PLUS]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements reactionLeftSide PLUS IDENTIFIER]
cmdl_Input 'ARROW'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 11.
cmdl_Shift 'variable', go to state 90
cmdl_Reduce [reactionLeftComponent ::= variable], go to state 11.
cmdl_Shift 'reactionLeftComponent'
cmdl_Reduce [reactionLeftSide ::= reactionLeftSide PLUS reactionLeftComponent], go to state 1.
cmdl_Shift 'reactionLeftSide', go to state 97
cmdl_Shift 'ARROW', go to state 2
cmdl_Return. Stack=[statements reactionLeftSide ARROW]
cmdl_Input 'COMMA'
cmdl_Reduce [reactionRightSide ::=], go to state 2.
cmdl_Shift 'reactionRightSide', go to state 96
cmdl_Shift 'COMMA', go to state 6
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA IDENTIFIER]
cmdl_Input 'SEMICOLON'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 6.
cmdl_Shift 'variable', go to state 99
cmdl_Reduce [expression ::= variable], go to state 6.
cmdl_Shift 'expression', go to state 64
cmdl_Reduce [reactionSpecifier ::= expression], go to state 6.
cmdl_Shift 'reactionSpecifier'
cmdl_Reduce [reactionSpecifiers ::= reactionSpecifier], go to state 6.
cmdl_Shift 'reactionSpecifiers', go to state 95
cmdl_Shift 'SEMICOLON'
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA reactionSpecifiers SEMICOLON]
cmdl_Input 'DOLLAR'
cmdl_Reduce [reaction ::= reactionLeftSide ARROW reactionRightSide COMMA reactionSpecifiers SEMICOLON], go to state 1.
cmdl_Shift 'reaction'
cmdl_Reduce [statements ::= statements statement], go to state 0.
cmdl_Shift 'statements', go to state 1
cmdl_Shift 'DOLLAR', go to state 55
cmdl_Return. Stack=[statements DOLLAR]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements DOLLAR IDENTIFIER]
cmdl_Input 'PLUS'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 55.
cmdl_Shift 'variable', go to state 114
cmdl_Reduce [reactionLeftComponent ::= DOLLAR variable], go to state 1.
cmdl_Shift 'reactionLeftComponent'
cmdl_Reduce [reactionLeftSide ::= reactionLeftComponent], go to state 1.
cmdl_Shift 'reactionLeftSide', go to state 97
cmdl_Shift 'PLUS', go to state 11
cmdl_Return. Stack=[statements reactionLeftSide PLUS]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements reactionLeftSide PLUS IDENTIFIER]
cmdl_Input 'ARROW'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 11.
cmdl_Shift 'variable', go to state 90
cmdl_Reduce [reactionLeftComponent ::= variable], go to state 11.
cmdl_Shift 'reactionLeftComponent'
cmdl_Reduce [reactionLeftSide ::= reactionLeftSide PLUS reactionLeftComponent], go to state 1.
cmdl_Shift 'reactionLeftSide', go to state 97
cmdl_Shift 'ARROW', go to state 2
cmdl_Return. Stack=[statements reactionLeftSide ARROW]
cmdl_Input 'COMMA'
cmdl_Reduce [reactionRightSide ::=], go to state 2.
cmdl_Shift 'reactionRightSide', go to state 96
cmdl_Shift 'COMMA', go to state 6
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA IDENTIFIER]
cmdl_Input 'SEMICOLON'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 6.
cmdl_Shift 'variable', go to state 99
cmdl_Reduce [expression ::= variable], go to state 6.
cmdl_Shift 'expression', go to state 64
cmdl_Reduce [reactionSpecifier ::= expression], go to state 6.
cmdl_Shift 'reactionSpecifier'
cmdl_Reduce [reactionSpecifiers ::= reactionSpecifier], go to state 6.
cmdl_Shift 'reactionSpecifiers', go to state 95
cmdl_Shift 'SEMICOLON'
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA reactionSpecifiers SEMICOLON]
cmdl_Input 'DOLLAR'
cmdl_Reduce [reaction ::= reactionLeftSide ARROW reactionRightSide COMMA reactionSpecifiers SEMICOLON], go to state 1.
cmdl_Shift 'reaction'
cmdl_Reduce [statements ::= statements statement], go to state 0.
cmdl_Shift 'statements', go to state 1
cmdl_Shift 'DOLLAR', go to state 55
cmdl_Return. Stack=[statements DOLLAR]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements DOLLAR IDENTIFIER]
cmdl_Input 'PLUS'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 55.
cmdl_Shift 'variable', go to state 114
cmdl_Reduce [reactionLeftComponent ::= DOLLAR variable], go to state 1.
cmdl_Shift 'reactionLeftComponent'
cmdl_Reduce [reactionLeftSide ::= reactionLeftComponent], go to state 1.
cmdl_Shift 'reactionLeftSide', go to state 97
cmdl_Shift 'PLUS', go to state 11
cmdl_Return. Stack=[statements reactionLeftSide PLUS]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements reactionLeftSide PLUS IDENTIFIER]
cmdl_Input 'ARROW'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 11.
cmdl_Shift 'variable', go to state 90
cmdl_Reduce [reactionLeftComponent ::= variable], go to state 11.
cmdl_Shift 'reactionLeftComponent'
cmdl_Reduce [reactionLeftSide ::= reactionLeftSide PLUS reactionLeftComponent], go to state 1.
cmdl_Shift 'reactionLeftSide', go to state 97
cmdl_Shift 'ARROW', go to state 2
cmdl_Return. Stack=[statements reactionLeftSide ARROW]
cmdl_Input 'COMMA'
cmdl_Reduce [reactionRightSide ::=], go to state 2.
cmdl_Shift 'reactionRightSide', go to state 96
cmdl_Shift 'COMMA', go to state 6
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA IDENTIFIER]
cmdl_Input 'SEMICOLON'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 6.
cmdl_Shift 'variable', go to state 99
cmdl_Reduce [expression ::= variable], go to state 6.
cmdl_Shift 'expression', go to state 64
cmdl_Reduce [reactionSpecifier ::= expression], go to state 6.
cmdl_Shift 'reactionSpecifier'
cmdl_Reduce [reactionSpecifiers ::= reactionSpecifier], go to state 6.
cmdl_Shift 'reactionSpecifiers', go to state 95
cmdl_Shift 'SEMICOLON'
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA reactionSpecifiers SEMICOLON]
cmdl_Input 'DOLLAR'
cmdl_Reduce [reaction ::= reactionLeftSide ARROW reactionRightSide COMMA reactionSpecifiers SEMICOLON], go to state 1.
cmdl_Shift 'reaction'
cmdl_Reduce [statements ::= statements statement], go to state 0.
cmdl_Shift 'statements', go to state 1
cmdl_Shift 'DOLLAR', go to state 55
cmdl_Return. Stack=[statements DOLLAR]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements DOLLAR IDENTIFIER]
cmdl_Input 'PLUS'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 55.
cmdl_Shift 'variable', go to state 114
cmdl_Reduce [reactionLeftComponent ::= DOLLAR variable], go to state 1.
cmdl_Shift 'reactionLeftComponent'
cmdl_Reduce [reactionLeftSide ::= reactionLeftComponent], go to state 1.
cmdl_Shift 'reactionLeftSide', go to state 97
cmdl_Shift 'PLUS', go to state 11
cmdl_Return. Stack=[statements reactionLeftSide PLUS]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements reactionLeftSide PLUS IDENTIFIER]
cmdl_Input 'ARROW'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 11.
cmdl_Shift 'variable', go to state 90
cmdl_Reduce [reactionLeftComponent ::= variable], go to state 11.
cmdl_Shift 'reactionLeftComponent'
cmdl_Reduce [reactionLeftSide ::= reactionLeftSide PLUS reactionLeftComponent], go to state 1.
cmdl_Shift 'reactionLeftSide', go to state 97
cmdl_Shift 'ARROW', go to state 2
cmdl_Return. Stack=[statements reactionLeftSide ARROW]
cmdl_Input 'COMMA'
cmdl_Reduce [reactionRightSide ::=], go to state 2.
cmdl_Shift 'reactionRightSide', go to state 96
cmdl_Shift 'COMMA', go to state 6
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA IDENTIFIER]
cmdl_Input 'SEMICOLON'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 6.
cmdl_Shift 'variable', go to state 99
cmdl_Reduce [expression ::= variable], go to state 6.
cmdl_Shift 'expression', go to state 64
cmdl_Reduce [reactionSpecifier ::= expression], go to state 6.
cmdl_Shift 'reactionSpecifier'
cmdl_Reduce [reactionSpecifiers ::= reactionSpecifier], go to state 6.
cmdl_Shift 'reactionSpecifiers', go to state 95
cmdl_Shift 'SEMICOLON'
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA reactionSpecifiers SEMICOLON]
cmdl_Input 'DOLLAR'
cmdl_Reduce [reaction ::= reactionLeftSide ARROW reactionRightSide COMMA reactionSpecifiers SEMICOLON], go to state 1.
cmdl_Shift 'reaction'
cmdl_Reduce [statements ::= statements statement], go to state 0.
cmdl_Shift 'statements', go to state 1
cmdl_Shift 'DOLLAR', go to state 55
cmdl_Return. Stack=[statements DOLLAR]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements DOLLAR IDENTIFIER]
cmdl_Input 'PLUS'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 55.
cmdl_Shift 'variable', go to state 114
cmdl_Reduce [reactionLeftComponent ::= DOLLAR variable], go to state 1.
cmdl_Shift 'reactionLeftComponent'
cmdl_Reduce [reactionLeftSide ::= reactionLeftComponent], go to state 1.
cmdl_Shift 'reactionLeftSide', go to state 97
cmdl_Shift 'PLUS', go to state 11
cmdl_Return. Stack=[statements reactionLeftSide PLUS]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements reactionLeftSide PLUS IDENTIFIER]
cmdl_Input 'ARROW'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 11.
cmdl_Shift 'variable', go to state 90
cmdl_Reduce [reactionLeftComponent ::= variable], go to state 11.
cmdl_Shift 'reactionLeftComponent'
cmdl_Reduce [reactionLeftSide ::= reactionLeftSide PLUS reactionLeftComponent], go to state 1.
cmdl_Shift 'reactionLeftSide', go to state 97
cmdl_Shift 'ARROW', go to state 2
cmdl_Return. Stack=[statements reactionLeftSide ARROW]
cmdl_Input 'COMMA'
cmdl_Reduce [reactionRightSide ::=], go to state 2.
cmdl_Shift 'reactionRightSide', go to state 96
cmdl_Shift 'COMMA', go to state 6
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA IDENTIFIER]
cmdl_Input 'SEMICOLON'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 6.
cmdl_Shift 'variable', go to state 99
cmdl_Reduce [expression ::= variable], go to state 6.
cmdl_Shift 'expression', go to state 64
cmdl_Reduce [reactionSpecifier ::= expression], go to state 6.
cmdl_Shift 'reactionSpecifier'
cmdl_Reduce [reactionSpecifiers ::= reactionSpecifier], go to state 6.
cmdl_Shift 'reactionSpecifiers', go to state 95
cmdl_Shift 'SEMICOLON'
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA reactionSpecifiers SEMICOLON]
cmdl_Input 'DOLLAR'
cmdl_Reduce [reaction ::= reactionLeftSide ARROW reactionRightSide COMMA reactionSpecifiers SEMICOLON], go to state 1.
cmdl_Shift 'reaction'
cmdl_Reduce [statements ::= statements statement], go to state 0.
cmdl_Shift 'statements', go to state 1
cmdl_Shift 'DOLLAR', go to state 55
cmdl_Return. Stack=[statements DOLLAR]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements DOLLAR IDENTIFIER]
cmdl_Input 'PLUS'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 55.
cmdl_Shift 'variable', go to state 114
cmdl_Reduce [reactionLeftComponent ::= DOLLAR variable], go to state 1.
cmdl_Shift 'reactionLeftComponent'
cmdl_Reduce [reactionLeftSide ::= reactionLeftComponent], go to state 1.
cmdl_Shift 'reactionLeftSide', go to state 97
cmdl_Shift 'PLUS', go to state 11
cmdl_Return. Stack=[statements reactionLeftSide PLUS]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements reactionLeftSide PLUS IDENTIFIER]
cmdl_Input 'ARROW'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 11.
cmdl_Shift 'variable', go to state 90
cmdl_Reduce [reactionLeftComponent ::= variable], go to state 11.
cmdl_Shift 'reactionLeftComponent'
cmdl_Reduce [reactionLeftSide ::= reactionLeftSide PLUS reactionLeftComponent], go to state 1.
cmdl_Shift 'reactionLeftSide', go to state 97
cmdl_Shift 'ARROW', go to state 2
cmdl_Return. Stack=[statements reactionLeftSide ARROW]
cmdl_Input 'COMMA'
cmdl_Reduce [reactionRightSide ::=], go to state 2.
cmdl_Shift 'reactionRightSide', go to state 96
cmdl_Shift 'COMMA', go to state 6
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA IDENTIFIER]
cmdl_Input 'SEMICOLON'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 6.
cmdl_Shift 'variable', go to state 99
cmdl_Reduce [expression ::= variable], go to state 6.
cmdl_Shift 'expression', go to state 64
cmdl_Reduce [reactionSpecifier ::= expression], go to state 6.
cmdl_Shift 'reactionSpecifier'
cmdl_Reduce [reactionSpecifiers ::= reactionSpecifier], go to state 6.
cmdl_Shift 'reactionSpecifiers', go to state 95
cmdl_Shift 'SEMICOLON'
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA reactionSpecifiers SEMICOLON]
cmdl_Input 'IDENTIFIER'
cmdl_Reduce [reaction ::= reactionLeftSide ARROW reactionRightSide COMMA reactionSpecifiers SEMICOLON], go to state 1.
cmdl_Shift 'reaction'
cmdl_Reduce [statements ::= statements statement], go to state 0.
cmdl_Shift 'statements', go to state 1
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements IDENTIFIER]
cmdl_Input 'LEFT_CURLY'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 1.
cmdl_Shift 'variable', go to state 88
cmdl_Shift 'LEFT_CURLY', go to state 52
cmdl_Return. Stack=[statements variable LEFT_CURLY]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements variable LEFT_CURLY IDENTIFIER]
cmdl_Input 'COMMA'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 52.
cmdl_Shift 'variable'
cmdl_Reduce [moleculePropertyNames ::= variable], go to state 52.
cmdl_Shift 'moleculePropertyNames', go to state 107
cmdl_Shift 'COMMA', go to state 56
cmdl_Return. Stack=[statements variable LEFT_CURLY moleculePropertyNames COMMA]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements variable LEFT_CURLY moleculePropertyNames COMMA IDENTIFIER]
cmdl_Input 'RIGHT_CURLY'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 56.
cmdl_Shift 'variable'
cmdl_Reduce [moleculePropertyNames ::= moleculePropertyNames COMMA variable], go to state 52.
cmdl_Shift 'moleculePropertyNames', go to state 107
cmdl_Shift 'RIGHT_CURLY'
cmdl_Return. Stack=[statements variable LEFT_CURLY moleculePropertyNames RIGHT_CURLY]
cmdl_Input 'ARROW'
cmdl_Reduce [reactionLeftComponent ::= variable LEFT_CURLY moleculePropertyNames RIGHT_CURLY], go to state 1.
cmdl_Shift 'reactionLeftComponent'
cmdl_Reduce [reactionLeftSide ::= reactionLeftComponent], go to state 1.
cmdl_Shift 'reactionLeftSide', go to state 97
cmdl_Shift 'ARROW', go to state 2
cmdl_Return. Stack=[statements reactionLeftSide ARROW]
cmdl_Input 'LEFT_SQUARE'
cmdl_Shift 'LEFT_SQUARE', go to state 20
cmdl_Return. Stack=[statements reactionLeftSide ARROW LEFT_SQUARE]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements reactionLeftSide ARROW LEFT_SQUARE IDENTIFIER]
cmdl_Input 'LEFT_ROUND'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 20.
cmdl_Shift 'variable', go to state 124
cmdl_Shift 'LEFT_ROUND', go to state 16
cmdl_Return. Stack=[statements reactionLeftSide ARROW LEFT_SQUARE variable LEFT_ROUND]
cmdl_Input 'RIGHT_ROUND'
cmdl_Reduce [arguments ::=], go to state 16.
cmdl_Shift 'arguments', go to state 108
cmdl_Shift 'RIGHT_ROUND'
cmdl_Return. Stack=[statements reactionLeftSide ARROW LEFT_SQUARE variable LEFT_ROUND arguments RIGHT_ROUND]
cmdl_Input 'LESS'
cmdl_Reduce [expression ::= variable LEFT_ROUND arguments RIGHT_ROUND], go to state 20.
cmdl_Shift 'expression', go to state 66
cmdl_Shift 'LESS', go to state 35
cmdl_Return. Stack=[statements reactionLeftSide ARROW LEFT_SQUARE expression LESS]
cmdl_Input 'LEFT_ROUND'
cmdl_Shift 'LEFT_ROUND', go to state 47
cmdl_Return. Stack=[statements reactionLeftSide ARROW LEFT_SQUARE expression LESS LEFT_ROUND]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements reactionLeftSide ARROW LEFT_SQUARE expression LESS LEFT_ROUND IDENTIFIER]
cmdl_Input 'DIVIDE'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 47.
cmdl_Shift 'variable', go to state 124
cmdl_Reduce [expression ::= variable], go to state 47.
cmdl_Shift 'expression', go to state 62
cmdl_Shift 'DIVIDE', go to state 43
cmdl_Return. Stack=[statements reactionLeftSide ARROW LEFT_SQUARE expression LESS LEFT_ROUND expression DIVIDE]
cmdl_Input 'LEFT_ROUND'
cmdl_Shift 'LEFT_ROUND', go to state 47
cmdl_Return. Stack=[statements reactionLeftSide ARROW LEFT_SQUARE expression LESS LEFT_ROUND expression DIVIDE LEFT_ROUND]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements reactionLeftSide ARROW LEFT_SQUARE expression LESS LEFT_ROUND expression DIVIDE LEFT_ROUND IDENTIFIER]
cmdl_Input 'PLUS'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 47.
cmdl_Shift 'variable', go to state 124
cmdl_Reduce [expression ::= variable], go to state 47.
cmdl_Shift 'expression', go to state 62
cmdl_Shift 'PLUS', go to state 46
cmdl_Return. Stack=[statements reactionLeftSide ARROW LEFT_SQUARE expression LESS LEFT_ROUND expression DIVIDE LEFT_ROUND expression PLUS]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements reactionLeftSide ARROW LEFT_SQUARE expression LESS LEFT_ROUND expression DIVIDE LEFT_ROUND expression PLUS IDENTIFIER]
cmdl_Input 'RIGHT_ROUND'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 46.
cmdl_Shift 'variable', go to state 124
cmdl_Reduce [expression ::= variable], go to state 46.
cmdl_Shift 'expression', go to state 94
cmdl_Reduce [sum ::= expression PLUS expression], go to state 47.
cmdl_Shift 'sum'
cmdl_Reduce [expression ::= sum], go to state 47.
cmdl_Shift 'expression', go to state 62
cmdl_Shift 'RIGHT_ROUND'
cmdl_Return. Stack=[statements reactionLeftSide ARROW LEFT_SQUARE expression LESS LEFT_ROUND expression DIVIDE LEFT_ROUND expression RIGHT_ROUND]
cmdl_Input 'MULTIPLY'
cmdl_Reduce [expression ::= LEFT_ROUND expression RIGHT_ROUND], go to state 43.
cmdl_Shift 'expression', go to state 122
cmdl_Reduce [product ::= expression DIVIDE expression], go to state 47.
cmdl_Shift 'product'
cmdl_Reduce [expression ::= product], go to state 47.
cmdl_Shift 'expression', go to state 62
cmdl_Shift 'MULTIPLY', go to state 44
cmdl_Return. Stack=[statements reactionLeftSide ARROW LEFT_SQUARE expression LESS LEFT_ROUND expression MULTIPLY]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements reactionLeftSide ARROW LEFT_SQUARE expression LESS LEFT_ROUND expression MULTIPLY IDENTIFIER]
cmdl_Input 'PLUS'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 44.
cmdl_Shift 'variable', go to state 124
cmdl_Reduce [expression ::= variable], go to state 44.
cmdl_Shift 'expression', go to state 123
cmdl_Reduce [product ::= expression MULTIPLY expression], go to state 47.
cmdl_Shift 'product'
cmdl_Reduce [expression ::= product], go to state 47.
cmdl_Shift 'expression', go to state 62
cmdl_Shift 'PLUS', go to state 46
cmdl_Return. Stack=[statements reactionLeftSide ARROW LEFT_SQUARE expression LESS LEFT_ROUND expression PLUS]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements reactionLeftSide ARROW LEFT_SQUARE expression LESS LEFT_ROUND expression PLUS IDENTIFIER]
cmdl_Input 'DIVIDE'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 46.
cmdl_Shift 'variable', go to state 124
cmdl_Reduce [expression ::= variable], go to state 46.
cmdl_Shift 'expression', go to state 94
cmdl_Shift 'DIVIDE', go to state 43
cmdl_Return. Stack=[statements reactionLeftSide ARROW LEFT_SQUARE expression LESS LEFT_ROUND expression PLUS expression DIVIDE]
cmdl_Input 'LEFT_ROUND'
cmdl_Shift 'LEFT_ROUND', go to state 47
cmdl_Return. Stack=[statements reactionLeftSide ARROW LEFT_SQUARE expression LESS LEFT_ROUND expression PLUS expression DIVIDE LEFT_ROUND]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements reactionLeftSide ARROW LEFT_SQUARE expression LESS LEFT_ROUND expression PLUS expression DIVIDE LEFT_ROUND IDENTIFIER]
cmdl_Input 'PLUS'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 47.
cmdl_Shift 'variable', go to state 124
cmdl_Reduce [expression ::= variable], go to state 47.
cmdl_Shift 'expression', go to state 62
cmdl_Shift 'PLUS', go to state 46
cmdl_Return. Stack=[statements reactionLeftSide ARROW LEFT_SQUARE expression LESS LEFT_ROUND expression PLUS expression DIVIDE LEFT_ROUND expression PLUS]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements reactionLeftSide ARROW LEFT_SQUARE expression LESS LEFT_ROUND expression PLUS expression DIVIDE LEFT_ROUND expression PLUS IDENTIFIER]
cmdl_Input 'RIGHT_ROUND'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 46.
cmdl_Shift 'variable', go to state 124
cmdl_Reduce [expression ::= variable], go to state 46.
cmdl_Shift 'expression', go to state 94
cmdl_Reduce [sum ::= expression PLUS expression], go to state 47.
cmdl_Shift 'sum'
cmdl_Reduce [expression ::= sum], go to state 47.
cmdl_Shift 'expression', go to state 62
cmdl_Shift 'RIGHT_ROUND'
cmdl_Return. Stack=[statements reactionLeftSide ARROW LEFT_SQUARE expression LESS LEFT_ROUND expression PLUS expression DIVIDE LEFT_ROUND expression RIGHT_ROUND]
cmdl_Input 'MULTIPLY'
cmdl_Reduce [expression ::= LEFT_ROUND expression RIGHT_ROUND], go to state 43.
cmdl_Shift 'expression', go to state 122
cmdl_Reduce [product ::= expression DIVIDE expression], go to state 46.
cmdl_Shift 'product'
cmdl_Reduce [expression ::= product], go to state 46.
cmdl_Shift 'expression', go to state 94
cmdl_Shift 'MULTIPLY', go to state 44
cmdl_Return. Stack=[statements reactionLeftSide ARROW LEFT_SQUARE expression LESS LEFT_ROUND expression PLUS expression MULTIPLY]
cmdl_Input 'LEFT_ROUND'
cmdl_Shift 'LEFT_ROUND', go to state 47
cmdl_Return. Stack=[statements reactionLeftSide ARROW LEFT_SQUARE expression LESS LEFT_ROUND expression PLUS expression MULTIPLY LEFT_ROUND]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements reactionLeftSide ARROW LEFT_SQUARE expression LESS LEFT_ROUND expression PLUS expression MULTIPLY LEFT_ROUND IDENTIFIER]
cmdl_Input 'RIGHT_ROUND'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 47.
cmdl_Shift 'variable', go to state 124
cmdl_Reduce [expression ::= variable], go to state 47.
cmdl_Shift 'expression', go to state 62
cmdl_Shift 'RIGHT_ROUND'
cmdl_Return. Stack=[statements reactionLeftSide ARROW LEFT_SQUARE expression LESS LEFT_ROUND expression PLUS expression MULTIPLY LEFT_ROUND expression RIGHT_ROUND]
cmdl_Input 'RIGHT_ROUND'
cmdl_Reduce [expression ::= LEFT_ROUND expression RIGHT_ROUND], go to state 44.
cmdl_Shift 'expression', go to state 123
cmdl_Reduce [product ::= expression MULTIPLY expression], go to state 46.
cmdl_Shift 'product'
cmdl_Reduce [expression ::= product], go to state 46.
cmdl_Shift 'expression', go to state 94
cmdl_Reduce [sum ::= expression PLUS expression], go to state 47.
cmdl_Shift 'sum'
cmdl_Reduce [expression ::= sum], go to state 47.
cmdl_Shift 'expression', go to state 62
cmdl_Shift 'RIGHT_ROUND'
cmdl_Return. Stack=[statements reactionLeftSide ARROW LEFT_SQUARE expression LESS LEFT_ROUND expression RIGHT_ROUND]
cmdl_Input 'QUESTIONMARK'
cmdl_Reduce [expression ::= LEFT_ROUND expression RIGHT_ROUND], go to state 35.
cmdl_Shift 'expression', go to state 80
cmdl_Reduce [expression ::= expression LESS expression], go to state 20.
cmdl_Shift 'expression', go to state 66
cmdl_Shift 'QUESTIONMARK', go to state 4
cmdl_Return. Stack=[statements reactionLeftSide ARROW LEFT_SQUARE expression QUESTIONMARK]
cmdl_Input 'LEFT_SQUARE'
cmdl_Shift 'LEFT_SQUARE', go to state 20
cmdl_Return. Stack=[statements reactionLeftSide ARROW LEFT_SQUARE expression QUESTIONMARK LEFT_SQUARE]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements reactionLeftSide ARROW LEFT_SQUARE expression QUESTIONMARK LEFT_SQUARE IDENTIFIER]
cmdl_Input 'LEFT_ROUND'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 20.
cmdl_Shift 'variable', go to state 124
cmdl_Shift 'LEFT_ROUND', go to state 16
cmdl_Return. Stack=[statements reactionLeftSide ARROW LEFT_SQUARE expression QUESTIONMARK LEFT_SQUARE variable LEFT_ROUND]
cmdl_Input 'RIGHT_ROUND'
cmdl_Reduce [arguments ::=], go to state 16.
cmdl_Shift 'arguments', go to state 108
cmdl_Shift 'RIGHT_ROUND'
cmdl_Return. Stack=[statements reactionLeftSide ARROW LEFT_SQUARE expression QUESTIONMARK LEFT_SQUARE variable LEFT_ROUND arguments RIGHT_ROUND]
cmdl_Input 'LESS'
cmdl_Reduce [expression ::= variable LEFT_ROUND arguments RIGHT_ROUND], go to state 20.
cmdl_Shift 'expression', go to state 66
cmdl_Shift 'LESS', go to state 35
cmdl_Return. Stack=[statements reactionLeftSide ARROW LEFT_SQUARE expression QUESTIONMARK LEFT_SQUARE expression LESS]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements reactionLeftSide ARROW LEFT_SQUARE expression QUESTIONMARK LEFT_SQUARE expression LESS IDENTIFIER]
cmdl_Input 'DIVIDE'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 35.
cmdl_Shift 'variable', go to state 124
cmdl_Reduce [expression ::= variable], go to state 35.
cmdl_Shift 'expression', go to state 80
cmdl_Shift 'DIVIDE', go to state 43
cmdl_Return. Stack=[statements reactionLeftSide ARROW LEFT_SQUARE expression QUESTIONMARK LEFT_SQUARE expression LESS expression DIVIDE]
cmdl_Input 'LEFT_ROUND'
cmdl_Shift 'LEFT_ROUND', go to state 47
cmdl_Return. Stack=[statements reactionLeftSide ARROW LEFT_SQUARE expression QUESTIONMARK LEFT_SQUARE expression LESS expression DIVIDE LEFT_ROUND]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements reactionLeftSide ARROW LEFT_SQUARE expression QUESTIONMARK LEFT_SQUARE expression LESS expression DIVIDE LEFT_ROUND IDENTIFIER]
cmdl_Input 'PLUS'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 47.
cmdl_Shift 'variable', go to state 124
cmdl_Reduce [expression ::= variable], go to state 47.
cmdl_Shift 'expression', go to state 62
cmdl_Shift 'PLUS', go to state 46
cmdl_Return. Stack=[statements reactionLeftSide ARROW LEFT_SQUARE expression QUESTIONMARK LEFT_SQUARE expression LESS expression DIVIDE LEFT_ROUND expression PLUS]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements reactionLeftSide ARROW LEFT_SQUARE expression QUESTIONMARK LEFT_SQUARE expression LESS expression DIVIDE LEFT_ROUND expression PLUS IDENTIFIER]
cmdl_Input 'RIGHT_ROUND'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 46.
cmdl_Shift 'variable', go to state 124
cmdl_Reduce [expression ::= variable], go to state 46.
cmdl_Shift 'expression', go to state 94
cmdl_Reduce [sum ::= expression PLUS expression], go to state 47.
cmdl_Shift 'sum'
cmdl_Reduce [expression ::= sum], go to state 47.
cmdl_Shift 'expression', go to state 62
cmdl_Shift 'RIGHT_ROUND'
cmdl_Return. Stack=[statements reactionLeftSide ARROW LEFT_SQUARE expression QUESTIONMARK LEFT_SQUARE expression LESS expression DIVIDE LEFT_ROUND expression RIGHT_ROUND]
cmdl_Input 'QUESTIONMARK'
cmdl_Reduce [expression ::= LEFT_ROUND expression RIGHT_ROUND], go to state 43.
cmdl_Shift 'expression', go to state 122
cmdl_Reduce [product ::= expression DIVIDE expression], go to state 35.
cmdl_Shift 'product'
cmdl_Reduce [expression ::= product], go to state 35.
cmdl_Shift 'expression', go to state 80
cmdl_Reduce [expression ::= expression LESS expression], go to state 20.
cmdl_Shift 'expression', go to state 66
cmdl_Shift 'QUESTIONMARK', go to state 4
cmdl_Return. Stack=[statements reactionLeftSide ARROW LEFT_SQUARE expression QUESTIONMARK LEFT_SQUARE expression QUESTIONMARK]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements reactionLeftSide ARROW LEFT_SQUARE expression QUESTIONMARK LEFT_SQUARE expression QUESTIONMARK IDENTIFIER]
cmdl_Input 'COLON'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 4.
cmdl_Shift 'variable', go to state 87
cmdl_Reduce [reactionRightComponent ::= variable], go to state 4.
cmdl_Shift 'reactionRightComponent'
cmdl_Reduce [reactionRightSide ::= reactionRightComponent], go to state 4.
cmdl_Shift 'reactionRightSide', go to state 102
cmdl_Shift 'COLON', go to state 3
cmdl_Return. Stack=[statements reactionLeftSide ARROW LEFT_SQUARE expression QUESTIONMARK LEFT_SQUARE expression QUESTIONMARK reactionRightSide COLON]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements reactionLeftSide ARROW LEFT_SQUARE expression QUESTIONMARK LEFT_SQUARE expression QUESTIONMARK reactionRightSide COLON IDENTIFIER]
cmdl_Input 'RIGHT_SQUARE'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 3.
cmdl_Shift 'variable', go to state 87
cmdl_Reduce [reactionRightComponent ::= variable], go to state 3.
cmdl_Shift 'reactionRightComponent'
cmdl_Reduce [reactionRightSide ::= reactionRightComponent], go to state 3.
cmdl_Shift 'reactionRightSide', go to state 101
cmdl_Shift 'RIGHT_SQUARE'
cmdl_Return. Stack=[statements reactionLeftSide ARROW LEFT_SQUARE expression QUESTIONMARK LEFT_SQUARE expression QUESTIONMARK reactionRightSide COLON reactionRightSide RIGHT_SQUARE]
cmdl_Input 'COLON'
cmdl_Reduce [reactionRightComponent ::= LEFT_SQUARE expression QUESTIONMARK reactionRightSide COLON reactionRightSide RIGHT_SQUARE], go to state 4.
cmdl_Shift 'reactionRightComponent'
cmdl_Reduce [reactionRightSide ::= reactionRightComponent], go to state 4.
cmdl_Shift 'reactionRightSide', go to state 102
cmdl_Shift 'COLON', go to state 3
cmdl_Return. Stack=[statements reactionLeftSide ARROW LEFT_SQUARE expression QUESTIONMARK reactionRightSide COLON]
cmdl_Input 'LEFT_SQUARE'
cmdl_Shift 'LEFT_SQUARE', go to state 20
cmdl_Return. Stack=[statements reactionLeftSide ARROW LEFT_SQUARE expression QUESTIONMARK reactionRightSide COLON LEFT_SQUARE]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements reactionLeftSide ARROW LEFT_SQUARE expression QUESTIONMARK reactionRightSide COLON LEFT_SQUARE IDENTIFIER]
cmdl_Input 'LEFT_ROUND'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 20.
cmdl_Shift 'variable', go to state 124
cmdl_Shift 'LEFT_ROUND', go to state 16
cmdl_Return. Stack=[statements reactionLeftSide ARROW LEFT_SQUARE expression QUESTIONMARK reactionRightSide COLON LEFT_SQUARE variable LEFT_ROUND]
cmdl_Input 'RIGHT_ROUND'
cmdl_Reduce [arguments ::=], go to state 16.
cmdl_Shift 'arguments', go to state 108
cmdl_Shift 'RIGHT_ROUND'
cmdl_Return. Stack=[statements reactionLeftSide ARROW LEFT_SQUARE expression QUESTIONMARK reactionRightSide COLON LEFT_SQUARE variable LEFT_ROUND arguments RIGHT_ROUND]
cmdl_Input 'LESS'
cmdl_Reduce [expression ::= variable LEFT_ROUND arguments RIGHT_ROUND], go to state 20.
cmdl_Shift 'expression', go to state 66
cmdl_Shift 'LESS', go to state 35
cmdl_Return. Stack=[statements reactionLeftSide ARROW LEFT_SQUARE expression QUESTIONMARK reactionRightSide COLON LEFT_SQUARE expression LESS]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements reactionLeftSide ARROW LEFT_SQUARE expression QUESTIONMARK reactionRightSide COLON LEFT_SQUARE expression LESS IDENTIFIER]
cmdl_Input 'DIVIDE'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 35.
cmdl_Shift 'variable', go to state 124
cmdl_Reduce [expression ::= variable], go to state 35.
cmdl_Shift 'expression', go to state 80
cmdl_Shift 'DIVIDE', go to state 43
cmdl_Return. Stack=[statements reactionLeftSide ARROW LEFT_SQUARE expression QUESTIONMARK reactionRightSide COLON LEFT_SQUARE expression LESS expression DIVIDE]
cmdl_Input 'LEFT_ROUND'
cmdl_Shift 'LEFT_ROUND', go to state 47
cmdl_Return. Stack=[statements reactionLeftSide ARROW LEFT_SQUARE expression QUESTIONMARK reactionRightSide COLON LEFT_SQUARE expression LESS expression DIVIDE LEFT_ROUND]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements reactionLeftSide ARROW LEFT_SQUARE expression QUESTIONMARK reactionRightSide COLON LEFT_SQUARE expression LESS expression DIVIDE LEFT_ROUND IDENTIFIER]
cmdl_Input 'PLUS'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 47.
cmdl_Shift 'variable', go to state 124
cmdl_Reduce [expression ::= variable], go to state 47.
cmdl_Shift 'expression', go to state 62
cmdl_Shift 'PLUS', go to state 46
cmdl_Return. Stack=[statements reactionLeftSide ARROW LEFT_SQUARE expression QUESTIONMARK reactionRightSide COLON LEFT_SQUARE expression LESS expression DIVIDE LEFT_ROUND expression PLUS]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements reactionLeftSide ARROW LEFT_SQUARE expression QUESTIONMARK reactionRightSide COLON LEFT_SQUARE expression LESS expression DIVIDE LEFT_ROUND expression PLUS IDENTIFIER]
cmdl_Input 'RIGHT_ROUND'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 46.
cmdl_Shift 'variable', go to state 124
cmdl_Reduce [expression ::= variable], go to state 46.
cmdl_Shift 'expression', go to state 94
cmdl_Reduce [sum ::= expression PLUS expression], go to state 47.
cmdl_Shift 'sum'
cmdl_Reduce [expression ::= sum], go to state 47.
cmdl_Shift 'expression', go to state 62
cmdl_Shift 'RIGHT_ROUND'
cmdl_Return. Stack=[statements reactionLeftSide ARROW LEFT_SQUARE expression QUESTIONMARK reactionRightSide COLON LEFT_SQUARE expression LESS expression DIVIDE LEFT_ROUND expression RIGHT_ROUND]
cmdl_Input 'QUESTIONMARK'
cmdl_Reduce [expression ::= LEFT_ROUND expression RIGHT_ROUND], go to state 43.
cmdl_Shift 'expression', go to state 122
cmdl_Reduce [product ::= expression DIVIDE expression], go to state 35.
cmdl_Shift 'product'
cmdl_Reduce [expression ::= product], go to state 35.
cmdl_Shift 'expression', go to state 80
cmdl_Reduce [expression ::= expression LESS expression], go to state 20.
cmdl_Shift 'expression', go to state 66
cmdl_Shift 'QUESTIONMARK', go to state 4
cmdl_Return. Stack=[statements reactionLeftSide ARROW LEFT_SQUARE expression QUESTIONMARK reactionRightSide COLON LEFT_SQUARE expression QUESTIONMARK]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements reactionLeftSide ARROW LEFT_SQUARE expression QUESTIONMARK reactionRightSide COLON LEFT_SQUARE expression QUESTIONMARK IDENTIFIER]
cmdl_Input 'COLON'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 4.
cmdl_Shift 'variable', go to state 87
cmdl_Reduce [reactionRightComponent ::= variable], go to state 4.
cmdl_Shift 'reactionRightComponent'
cmdl_Reduce [reactionRightSide ::= reactionRightComponent], go to state 4.
cmdl_Shift 'reactionRightSide', go to state 102
cmdl_Shift 'COLON', go to state 3
cmdl_Return. Stack=[statements reactionLeftSide ARROW LEFT_SQUARE expression QUESTIONMARK reactionRightSide COLON LEFT_SQUARE expression QUESTIONMARK reactionRightSide COLON]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements reactionLeftSide ARROW LEFT_SQUARE expression QUESTIONMARK reactionRightSide COLON LEFT_SQUARE expression QUESTIONMARK reactionRightSide COLON IDENTIFIER]
cmdl_Input 'RIGHT_SQUARE'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 3.
cmdl_Shift 'variable', go to state 87
cmdl_Reduce [reactionRightComponent ::= variable], go to state 3.
cmdl_Shift 'reactionRightComponent'
cmdl_Reduce [reactionRightSide ::= reactionRightComponent], go to state 3.
cmdl_Shift 'reactionRightSide', go to state 101
cmdl_Shift 'RIGHT_SQUARE'
cmdl_Return. Stack=[statements reactionLeftSide ARROW LEFT_SQUARE expression QUESTIONMARK reactionRightSide COLON LEFT_SQUARE expression QUESTIONMARK reactionRightSide COLON reactionRightSide RIGHT_SQUARE]
cmdl_Input 'RIGHT_SQUARE'
cmdl_Reduce [reactionRightComponent ::= LEFT_SQUARE expression QUESTIONMARK reactionRightSide COLON reactionRightSide RIGHT_SQUARE], go to state 3.
cmdl_Shift 'reactionRightComponent'
cmdl_Reduce [reactionRightSide ::= reactionRightComponent], go to state 3.
cmdl_Shift 'reactionRightSide', go to state 101
cmdl_Shift 'RIGHT_SQUARE'
cmdl_Return. Stack=[statements reactionLeftSide ARROW LEFT_SQUARE expression QUESTIONMARK reactionRightSide COLON reactionRightSide RIGHT_SQUARE]
cmdl_Input 'COMMA'
cmdl_Reduce [reactionRightComponent ::= LEFT_SQUARE expression QUESTIONMARK reactionRightSide COLON reactionRightSide RIGHT_SQUARE], go to state 2.
cmdl_Shift 'reactionRightComponent'
cmdl_Reduce [reactionRightSide ::= reactionRightComponent], go to state 2.
cmdl_Shift 'reactionRightSide', go to state 96
cmdl_Shift 'COMMA', go to state 6
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA IDENTIFIER]
cmdl_Input 'COLON'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 6.
cmdl_Shift 'variable', go to state 99
cmdl_Shift 'COLON', go to state 19
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA variable COLON]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA variable COLON IDENTIFIER]
cmdl_Input 'SEMICOLON'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 19.
cmdl_Shift 'variable', go to state 124
cmdl_Reduce [expression ::= variable], go to state 19.
cmdl_Shift 'expression', go to state 65
cmdl_Reduce [reactionSpecifier ::= variable COLON expression], go to state 6.
cmdl_Shift 'reactionSpecifier'
cmdl_Reduce [reactionSpecifiers ::= reactionSpecifier], go to state 6.
cmdl_Shift 'reactionSpecifiers', go to state 95
cmdl_Shift 'SEMICOLON'
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA reactionSpecifiers SEMICOLON]
cmdl_Input 'IDENTIFIER'
cmdl_Reduce [reaction ::= reactionLeftSide ARROW reactionRightSide COMMA reactionSpecifiers SEMICOLON], go to state 1.
cmdl_Shift 'reaction'
cmdl_Reduce [statements ::= statements statement], go to state 0.
cmdl_Shift 'statements', go to state 1
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements IDENTIFIER]
cmdl_Input 'ARROW'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 1.
cmdl_Shift 'variable', go to state 88
cmdl_Reduce [reactionLeftComponent ::= variable], go to state 1.
cmdl_Shift 'reactionLeftComponent'
cmdl_Reduce [reactionLeftSide ::= reactionLeftComponent], go to state 1.
cmdl_Shift 'reactionLeftSide', go to state 97
cmdl_Shift 'ARROW', go to state 2
cmdl_Return. Stack=[statements reactionLeftSide ARROW]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements reactionLeftSide ARROW IDENTIFIER]
cmdl_Input 'MULTIPLY'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 2.
cmdl_Shift 'variable', go to state 87
cmdl_Reduce [expression ::= variable], go to state 2.
cmdl_Shift 'expression', go to state 67
cmdl_Shift 'MULTIPLY', go to state 10
cmdl_Return. Stack=[statements reactionLeftSide ARROW expression MULTIPLY]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements reactionLeftSide ARROW expression MULTIPLY IDENTIFIER]
cmdl_Input 'COMMA'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 10.
cmdl_Shift 'variable', go to state 87
cmdl_Reduce [reactionRightComponent ::= variable], go to state 10.
cmdl_Shift 'reactionRightComponent'
cmdl_Reduce [reactionRightComponent ::= expression MULTIPLY reactionRightComponent], go to state 2.
cmdl_Shift 'reactionRightComponent'
cmdl_Reduce [reactionRightSide ::= reactionRightComponent], go to state 2.
cmdl_Shift 'reactionRightSide', go to state 96
cmdl_Shift 'COMMA', go to state 6
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA IDENTIFIER]
cmdl_Input 'COLON'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 6.
cmdl_Shift 'variable', go to state 99
cmdl_Shift 'COLON', go to state 19
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA variable COLON]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA variable COLON IDENTIFIER]
cmdl_Input 'MINUS'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 19.
cmdl_Shift 'variable', go to state 124
cmdl_Reduce [expression ::= variable], go to state 19.
cmdl_Shift 'expression', go to state 65
cmdl_Shift 'MINUS', go to state 45
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA variable COLON expression MINUS]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA variable COLON expression MINUS IDENTIFIER]
cmdl_Input 'SEMICOLON'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 45.
cmdl_Shift 'variable', go to state 124
cmdl_Reduce [expression ::= variable], go to state 45.
cmdl_Shift 'expression', go to state 93
cmdl_Reduce [sum ::= expression MINUS expression], go to state 19.
cmdl_Shift 'sum'
cmdl_Reduce [expression ::= sum], go to state 19.
cmdl_Shift 'expression', go to state 65
cmdl_Reduce [reactionSpecifier ::= variable COLON expression], go to state 6.
cmdl_Shift 'reactionSpecifier'
cmdl_Reduce [reactionSpecifiers ::= reactionSpecifier], go to state 6.
cmdl_Shift 'reactionSpecifiers', go to state 95
cmdl_Shift 'SEMICOLON'
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA reactionSpecifiers SEMICOLON]
cmdl_Input 'IDENTIFIER'
cmdl_Reduce [reaction ::= reactionLeftSide ARROW reactionRightSide COMMA reactionSpecifiers SEMICOLON], go to state 1.
cmdl_Shift 'reaction'
cmdl_Reduce [statements ::= statements statement], go to state 0.
cmdl_Shift 'statements', go to state 1
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements IDENTIFIER]
cmdl_Input 'ARROW'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 1.
cmdl_Shift 'variable', go to state 88
cmdl_Reduce [reactionLeftComponent ::= variable], go to state 1.
cmdl_Shift 'reactionLeftComponent'
cmdl_Reduce [reactionLeftSide ::= reactionLeftComponent], go to state 1.
cmdl_Shift 'reactionLeftSide', go to state 97
cmdl_Shift 'ARROW', go to state 2
cmdl_Return. Stack=[statements reactionLeftSide ARROW]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements reactionLeftSide ARROW IDENTIFIER]
cmdl_Input 'MULTIPLY'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 2.
cmdl_Shift 'variable', go to state 87
cmdl_Reduce [expression ::= variable], go to state 2.
cmdl_Shift 'expression', go to state 67
cmdl_Shift 'MULTIPLY', go to state 10
cmdl_Return. Stack=[statements reactionLeftSide ARROW expression MULTIPLY]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements reactionLeftSide ARROW expression MULTIPLY IDENTIFIER]
cmdl_Input 'COMMA'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 10.
cmdl_Shift 'variable', go to state 87
cmdl_Reduce [reactionRightComponent ::= variable], go to state 10.
cmdl_Shift 'reactionRightComponent'
cmdl_Reduce [reactionRightComponent ::= expression MULTIPLY reactionRightComponent], go to state 2.
cmdl_Shift 'reactionRightComponent'
cmdl_Reduce [reactionRightSide ::= reactionRightComponent], go to state 2.
cmdl_Shift 'reactionRightSide', go to state 96
cmdl_Shift 'COMMA', go to state 6
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA IDENTIFIER]
cmdl_Input 'COLON'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 6.
cmdl_Shift 'variable', go to state 99
cmdl_Shift 'COLON', go to state 19
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA variable COLON]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA variable COLON IDENTIFIER]
cmdl_Input 'MINUS'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 19.
cmdl_Shift 'variable', go to state 124
cmdl_Reduce [expression ::= variable], go to state 19.
cmdl_Shift 'expression', go to state 65
cmdl_Shift 'MINUS', go to state 45
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA variable COLON expression MINUS]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA variable COLON expression MINUS IDENTIFIER]
cmdl_Input 'SEMICOLON'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 45.
cmdl_Shift 'variable', go to state 124
cmdl_Reduce [expression ::= variable], go to state 45.
cmdl_Shift 'expression', go to state 93
cmdl_Reduce [sum ::= expression MINUS expression], go to state 19.
cmdl_Shift 'sum'
cmdl_Reduce [expression ::= sum], go to state 19.
cmdl_Shift 'expression', go to state 65
cmdl_Reduce [reactionSpecifier ::= variable COLON expression], go to state 6.
cmdl_Shift 'reactionSpecifier'
cmdl_Reduce [reactionSpecifiers ::= reactionSpecifier], go to state 6.
cmdl_Shift 'reactionSpecifiers', go to state 95
cmdl_Shift 'SEMICOLON'
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA reactionSpecifiers SEMICOLON]
cmdl_Input 'IDENTIFIER'
cmdl_Reduce [reaction ::= reactionLeftSide ARROW reactionRightSide COMMA reactionSpecifiers SEMICOLON], go to state 1.
cmdl_Shift 'reaction'
cmdl_Reduce [statements ::= statements statement], go to state 0.
cmdl_Shift 'statements', go to state 1
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements IDENTIFIER]
cmdl_Input 'ARROW'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 1.
cmdl_Shift 'variable', go to state 88
cmdl_Reduce [reactionLeftComponent ::= variable], go to state 1.
cmdl_Shift 'reactionLeftComponent'
cmdl_Reduce [reactionLeftSide ::= reactionLeftComponent], go to state 1.
cmdl_Shift 'reactionLeftSide', go to state 97
cmdl_Shift 'ARROW', go to state 2
cmdl_Return. Stack=[statements reactionLeftSide ARROW]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements reactionLeftSide ARROW IDENTIFIER]
cmdl_Input 'COMMA'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 2.
cmdl_Shift 'variable', go to state 87
cmdl_Reduce [reactionRightComponent ::= variable], go to state 2.
cmdl_Shift 'reactionRightComponent'
cmdl_Reduce [reactionRightSide ::= reactionRightComponent], go to state 2.
cmdl_Shift 'reactionRightSide', go to state 96
cmdl_Shift 'COMMA', go to state 6
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA IDENTIFIER]
cmdl_Input 'SEMICOLON'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 6.
cmdl_Shift 'variable', go to state 99
cmdl_Reduce [expression ::= variable], go to state 6.
cmdl_Shift 'expression', go to state 64
cmdl_Reduce [reactionSpecifier ::= expression], go to state 6.
cmdl_Shift 'reactionSpecifier'
cmdl_Reduce [reactionSpecifiers ::= reactionSpecifier], go to state 6.
cmdl_Shift 'reactionSpecifiers', go to state 95
cmdl_Shift 'SEMICOLON'
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA reactionSpecifiers SEMICOLON]
cmdl_Input 'IDENTIFIER'
cmdl_Reduce [reaction ::= reactionLeftSide ARROW reactionRightSide COMMA reactionSpecifiers SEMICOLON], go to state 1.
cmdl_Shift 'reaction'
cmdl_Reduce [statements ::= statements statement], go to state 0.
cmdl_Shift 'statements', go to state 1
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements IDENTIFIER]
cmdl_Input 'ARROW'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 1.
cmdl_Shift 'variable', go to state 88
cmdl_Reduce [reactionLeftComponent ::= variable], go to state 1.
cmdl_Shift 'reactionLeftComponent'
cmdl_Reduce [reactionLeftSide ::= reactionLeftComponent], go to state 1.
cmdl_Shift 'reactionLeftSide', go to state 97
cmdl_Shift 'ARROW', go to state 2
cmdl_Return. Stack=[statements reactionLeftSide ARROW]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements reactionLeftSide ARROW IDENTIFIER]
cmdl_Input 'COMMA'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 2.
cmdl_Shift 'variable', go to state 87
cmdl_Reduce [reactionRightComponent ::= variable], go to state 2.
cmdl_Shift 'reactionRightComponent'
cmdl_Reduce [reactionRightSide ::= reactionRightComponent], go to state 2.
cmdl_Shift 'reactionRightSide', go to state 96
cmdl_Shift 'COMMA', go to state 6
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA IDENTIFIER]
cmdl_Input 'SEMICOLON'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 6.
cmdl_Shift 'variable', go to state 99
cmdl_Reduce [expression ::= variable], go to state 6.
cmdl_Shift 'expression', go to state 64
cmdl_Reduce [reactionSpecifier ::= expression], go to state 6.
cmdl_Shift 'reactionSpecifier'
cmdl_Reduce [reactionSpecifiers ::= reactionSpecifier], go to state 6.
cmdl_Shift 'reactionSpecifiers', go to state 95
cmdl_Shift 'SEMICOLON'
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA reactionSpecifiers SEMICOLON]
cmdl_Input 'IDENTIFIER'
cmdl_Reduce [reaction ::= reactionLeftSide ARROW reactionRightSide COMMA reactionSpecifiers SEMICOLON], go to state 1.
cmdl_Shift 'reaction'
cmdl_Reduce [statements ::= statements statement], go to state 0.
cmdl_Shift 'statements', go to state 1
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements IDENTIFIER]
cmdl_Input 'ARROW'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 1.
cmdl_Shift 'variable', go to state 88
cmdl_Reduce [reactionLeftComponent ::= variable], go to state 1.
cmdl_Shift 'reactionLeftComponent'
cmdl_Reduce [reactionLeftSide ::= reactionLeftComponent], go to state 1.
cmdl_Shift 'reactionLeftSide', go to state 97
cmdl_Shift 'ARROW', go to state 2
cmdl_Return. Stack=[statements reactionLeftSide ARROW]
cmdl_Input 'COMMA'
cmdl_Reduce [reactionRightSide ::=], go to state 2.
cmdl_Shift 'reactionRightSide', go to state 96
cmdl_Shift 'COMMA', go to state 6
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA IDENTIFIER]
cmdl_Input 'SEMICOLON'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 6.
cmdl_Shift 'variable', go to state 99
cmdl_Reduce [expression ::= variable], go to state 6.
cmdl_Shift 'expression', go to state 64
cmdl_Reduce [reactionSpecifier ::= expression], go to state 6.
cmdl_Shift 'reactionSpecifier'
cmdl_Reduce [reactionSpecifiers ::= reactionSpecifier], go to state 6.
cmdl_Shift 'reactionSpecifiers', go to state 95
cmdl_Shift 'SEMICOLON'
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA reactionSpecifiers SEMICOLON]
cmdl_Input 'IDENTIFIER'
cmdl_Reduce [reaction ::= reactionLeftSide ARROW reactionRightSide COMMA reactionSpecifiers SEMICOLON], go to state 1.
cmdl_Shift 'reaction'
cmdl_Reduce [statements ::= statements statement], go to state 0.
cmdl_Shift 'statements', go to state 1
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements IDENTIFIER]
cmdl_Input 'ARROW'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 1.
cmdl_Shift 'variable', go to state 88
cmdl_Reduce [reactionLeftComponent ::= variable], go to state 1.
cmdl_Shift 'reactionLeftComponent'
cmdl_Reduce [reactionLeftSide ::= reactionLeftComponent], go to state 1.
cmdl_Shift 'reactionLeftSide', go to state 97
cmdl_Shift 'ARROW', go to state 2
cmdl_Return. Stack=[statements reactionLeftSide ARROW]
cmdl_Input 'COMMA'
cmdl_Reduce [reactionRightSide ::=], go to state 2.
cmdl_Shift 'reactionRightSide', go to state 96
cmdl_Shift 'COMMA', go to state 6
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA IDENTIFIER]
cmdl_Input 'SEMICOLON'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 6.
cmdl_Shift 'variable', go to state 99
cmdl_Reduce [expression ::= variable], go to state 6.
cmdl_Shift 'expression', go to state 64
cmdl_Reduce [reactionSpecifier ::= expression], go to state 6.
cmdl_Shift 'reactionSpecifier'
cmdl_Reduce [reactionSpecifiers ::= reactionSpecifier], go to state 6.
cmdl_Shift 'reactionSpecifiers', go to state 95
cmdl_Shift 'SEMICOLON'
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA reactionSpecifiers SEMICOLON]
cmdl_Input 'IDENTIFIER'
cmdl_Reduce [reaction ::= reactionLeftSide ARROW reactionRightSide COMMA reactionSpecifiers SEMICOLON], go to state 1.
cmdl_Shift 'reaction'
cmdl_Reduce [statements ::= statements statement], go to state 0.
cmdl_Shift 'statements', go to state 1
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements IDENTIFIER]
cmdl_Input 'ARROW'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 1.
cmdl_Shift 'variable', go to state 88
cmdl_Reduce [reactionLeftComponent ::= variable], go to state 1.
cmdl_Shift 'reactionLeftComponent'
cmdl_Reduce [reactionLeftSide ::= reactionLeftComponent], go to state 1.
cmdl_Shift 'reactionLeftSide', go to state 97
cmdl_Shift 'ARROW', go to state 2
cmdl_Return. Stack=[statements reactionLeftSide ARROW]
cmdl_Input 'COMMA'
cmdl_Reduce [reactionRightSide ::=], go to state 2.
cmdl_Shift 'reactionRightSide', go to state 96
cmdl_Shift 'COMMA', go to state 6
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA IDENTIFIER]
cmdl_Input 'SEMICOLON'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 6.
cmdl_Shift 'variable', go to state 99
cmdl_Reduce [expression ::= variable], go to state 6.
cmdl_Shift 'expression', go to state 64
cmdl_Reduce [reactionSpecifier ::= expression], go to state 6.
cmdl_Shift 'reactionSpecifier'
cmdl_Reduce [reactionSpecifiers ::= reactionSpecifier], go to state 6.
cmdl_Shift 'reactionSpecifiers', go to state 95
cmdl_Shift 'SEMICOLON'
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA reactionSpecifiers SEMICOLON]
cmdl_Input 'IDENTIFIER'
cmdl_Reduce [reaction ::= reactionLeftSide ARROW reactionRightSide COMMA reactionSpecifiers SEMICOLON], go to state 1.
cmdl_Shift 'reaction'
cmdl_Reduce [statements ::= statements statement], go to state 0.
cmdl_Shift 'statements', go to state 1
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements IDENTIFIER]
cmdl_Input 'ARROW'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 1.
cmdl_Shift 'variable', go to state 88
cmdl_Reduce [reactionLeftComponent ::= variable], go to state 1.
cmdl_Shift 'reactionLeftComponent'
cmdl_Reduce [reactionLeftSide ::= reactionLeftComponent], go to state 1.
cmdl_Shift 'reactionLeftSide', go to state 97
cmdl_Shift 'ARROW', go to state 2
cmdl_Return. Stack=[statements reactionLeftSide ARROW]
cmdl_Input 'COMMA'
cmdl_Reduce [reactionRightSide ::=], go to state 2.
cmdl_Shift 'reactionRightSide', go to state 96
cmdl_Shift 'COMMA', go to state 6
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA IDENTIFIER]
cmdl_Input 'SEMICOLON'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 6.
cmdl_Shift 'variable', go to state 99
cmdl_Reduce [expression ::= variable], go to state 6.
cmdl_Shift 'expression', go to state 64
cmdl_Reduce [reactionSpecifier ::= expression], go to state 6.
cmdl_Shift 'reactionSpecifier'
cmdl_Reduce [reactionSpecifiers ::= reactionSpecifier], go to state 6.
cmdl_Shift 'reactionSpecifiers', go to state 95
cmdl_Shift 'SEMICOLON'
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA reactionSpecifiers SEMICOLON]
cmdl_Input 'IDENTIFIER'
cmdl_Reduce [reaction ::= reactionLeftSide ARROW reactionRightSide COMMA reactionSpecifiers SEMICOLON], go to state 1.
cmdl_Shift 'reaction'
cmdl_Reduce [statements ::= statements statement], go to state 0.
cmdl_Shift 'statements', go to state 1
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements IDENTIFIER]
cmdl_Input 'ARROW'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 1.
cmdl_Shift 'variable', go to state 88
cmdl_Reduce [reactionLeftComponent ::= variable], go to state 1.
cmdl_Shift 'reactionLeftComponent'
cmdl_Reduce [reactionLeftSide ::= reactionLeftComponent], go to state 1.
cmdl_Shift 'reactionLeftSide', go to state 97
cmdl_Shift 'ARROW', go to state 2
cmdl_Return. Stack=[statements reactionLeftSide ARROW]
cmdl_Input 'COMMA'
cmdl_Reduce [reactionRightSide ::=], go to state 2.
cmdl_Shift 'reactionRightSide', go to state 96
cmdl_Shift 'COMMA', go to state 6
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA IDENTIFIER]
cmdl_Input 'SEMICOLON'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 6.
cmdl_Shift 'variable', go to state 99
cmdl_Reduce [expression ::= variable], go to state 6.
cmdl_Shift 'expression', go to state 64
cmdl_Reduce [reactionSpecifier ::= expression], go to state 6.
cmdl_Shift 'reactionSpecifier'
cmdl_Reduce [reactionSpecifiers ::= reactionSpecifier], go to state 6.
cmdl_Shift 'reactionSpecifiers', go to state 95
cmdl_Shift 'SEMICOLON'
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA reactionSpecifiers SEMICOLON]
cmdl_Input 'IDENTIFIER'
cmdl_Reduce [reaction ::= reactionLeftSide ARROW reactionRightSide COMMA reactionSpecifiers SEMICOLON], go to state 1.
cmdl_Shift 'reaction'
cmdl_Reduce [statements ::= statements statement], go to state 0.
cmdl_Shift 'statements', go to state 1
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements IDENTIFIER]
cmdl_Input 'ARROW'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 1.
cmdl_Shift 'variable', go to state 88
cmdl_Reduce [reactionLeftComponent ::= variable], go to state 1.
cmdl_Shift 'reactionLeftComponent'
cmdl_Reduce [reactionLeftSide ::= reactionLeftComponent], go to state 1.
cmdl_Shift 'reactionLeftSide', go to state 97
cmdl_Shift 'ARROW', go to state 2
cmdl_Return. Stack=[statements reactionLeftSide ARROW]
cmdl_Input 'COMMA'
cmdl_Reduce [reactionRightSide ::=], go to state 2.
cmdl_Shift 'reactionRightSide', go to state 96
cmdl_Shift 'COMMA', go to state 6
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA IDENTIFIER]
cmdl_Input 'SEMICOLON'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 6.
cmdl_Shift 'variable', go to state 99
cmdl_Reduce [expression ::= variable], go to state 6.
cmdl_Shift 'expression', go to state 64
cmdl_Reduce [reactionSpecifier ::= expression], go to state 6.
cmdl_Shift 'reactionSpecifier'
cmdl_Reduce [reactionSpecifiers ::= reactionSpecifier], go to state 6.
cmdl_Shift 'reactionSpecifiers', go to state 95
cmdl_Shift 'SEMICOLON'
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA reactionSpecifiers SEMICOLON]
cmdl_Input 'IDENTIFIER'
cmdl_Reduce [reaction ::= reactionLeftSide ARROW reactionRightSide COMMA reactionSpecifiers SEMICOLON], go to state 1.
cmdl_Shift 'reaction'
cmdl_Reduce [statements ::= statements statement], go to state 0.
cmdl_Shift 'statements', go to state 1
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements IDENTIFIER]
cmdl_Input 'ARROW'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 1.
cmdl_Shift 'variable', go to state 88
cmdl_Reduce [reactionLeftComponent ::= variable], go to state 1.
cmdl_Shift 'reactionLeftComponent'
cmdl_Reduce [reactionLeftSide ::= reactionLeftComponent], go to state 1.
cmdl_Shift 'reactionLeftSide', go to state 97
cmdl_Shift 'ARROW', go to state 2
cmdl_Return. Stack=[statements reactionLeftSide ARROW]
cmdl_Input 'COMMA'
cmdl_Reduce [reactionRightSide ::=], go to state 2.
cmdl_Shift 'reactionRightSide', go to state 96
cmdl_Shift 'COMMA', go to state 6
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA IDENTIFIER]
cmdl_Input 'SEMICOLON'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 6.
cmdl_Shift 'variable', go to state 99
cmdl_Reduce [expression ::= variable], go to state 6.
cmdl_Shift 'expression', go to state 64
cmdl_Reduce [reactionSpecifier ::= expression], go to state 6.
cmdl_Shift 'reactionSpecifier'
cmdl_Reduce [reactionSpecifiers ::= reactionSpecifier], go to state 6.
cmdl_Shift 'reactionSpecifiers', go to state 95
cmdl_Shift 'SEMICOLON'
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA reactionSpecifiers SEMICOLON]
cmdl_Input 'IDENTIFIER'
cmdl_Reduce [reaction ::= reactionLeftSide ARROW reactionRightSide COMMA reactionSpecifiers SEMICOLON], go to state 1.
cmdl_Shift 'reaction'
cmdl_Reduce [statements ::= statements statement], go to state 0.
cmdl_Shift 'statements', go to state 1
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements IDENTIFIER]
cmdl_Input 'ARROW'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 1.
cmdl_Shift 'variable', go to state 88
cmdl_Reduce [reactionLeftComponent ::= variable], go to state 1.
cmdl_Shift 'reactionLeftComponent'
cmdl_Reduce [reactionLeftSide ::= reactionLeftComponent], go to state 1.
cmdl_Shift 'reactionLeftSide', go to state 97
cmdl_Shift 'ARROW', go to state 2
cmdl_Return. Stack=[statements reactionLeftSide ARROW]
cmdl_Input 'COMMA'
cmdl_Reduce [reactionRightSide ::=], go to state 2.
cmdl_Shift 'reactionRightSide', go to state 96
cmdl_Shift 'COMMA', go to state 6
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA]
cmdl_Input 'IDENTIFIER'
cmdl_Shift 'IDENTIFIER', go to state 125
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA IDENTIFIER]
cmdl_Input 'SEMICOLON'
cmdl_Reduce [variable ::= IDENTIFIER], go to state 6.
cmdl_Shift 'variable', go to state 99
cmdl_Reduce [expression ::= variable], go to state 6.
cmdl_Shift 'expression', go to state 64
cmdl_Reduce [reactionSpecifier ::= expression], go to state 6.
cmdl_Shift 'reactionSpecifier'
cmdl_Reduce [reactionSpecifiers ::= reactionSpecifier], go to state 6.
cmdl_Shift 'reactionSpecifiers', go to state 95
cmdl_Shift 'SEMICOLON'
cmdl_Return. Stack=[statements reactionLeftSide ARROW reactionRightSide COMMA reactionSpecifiers SEMICOLON]
cmdl_Input '$'
cmdl_Reduce [reaction ::= reactionLeftSide ARROW reactionRightSide COMMA reactionSpecifiers SEMICOLON], go to state 1.
cmdl_Shift 'reaction'
cmdl_Reduce [statements ::= statements statement], go to state 0.
cmdl_Shift 'statements', go to state 1
cmdl_Reduce [model ::= statements], go to state 0.
cmdl_Accept!
cmdl_Return. Stack=]
